{
  "id": 1377,
  "url": "www.dofactory.com/topic/1377/how-to-deserialization-of-nested-json.aspx",
  "title": "How to: Deserialization of nested JSON",
  "ques": "I am receiving the JSON formatted string from a web service over the Internet. \r\nIt is roughly formatted like so: \r\n\r\n{   \u0027version\u0027 : 2,\r\n    \u0027query\u0027 : \u0027Companies, CA\u0027,\r\n    \u0027begin\u0027 : 1,\r\n    \u0027end\u0027 : 3,\r\n    \u0027totalResults\u0027 : 718,\r\n    \u0027pageNumber\u0027 : 0,\r\n\r\n    \u0027results\u0027 : [ \r\n          { \u0027company\u0027 : \u0027ABC Company Inc.\u0027,  \u0027city\u0027 : \u0027Sacramento\u0027,  \u0027state\u0027 : \u0027CA\u0027 } ,\r\n          { \u0027company\u0027 : \u0027XYZ Company Inc.\u0027,  \u0027city\u0027 : \u0027San Francisco\u0027,  \u0027state\u0027 : \u0027CA\u0027 } ,\r\n          { \u0027company\u0027 : \u0027KLM Company Inc.\u0027,  \u0027city\u0027 : \u0027Los Angeles\u0027,  \u0027state\u0027 : \u0027CA\u0027 } \r\n    ]\r\n}\r\nI need to get the array of companies out of this results element and add these to a list of companies, something like List\u003cCompany\u003e, where Company is a simple class with Name, City, and State properties.\r\nFinally, I am not able to use any third party JSON parsers. What is the best way to get this done?\r\nThanks,\r\n\r\n\r\n",
  "answers": [
    {
      "ansID": 1539,
      "ans": "I have very little experience with JSON, but have you taken a look at JavaScriptSerializer, I think it is found in System.Web.Extensions.dll. It might be what you need.\r\n\r\nUPDATE:\r\nThere are some examples here, that you can take a look at:\r\n http://blah.winsmarts.com/2009-12-How_to_parse_JSON_from_C-.aspx\r\n  http://stackoverflow.com/questions/401756/parsing-json-using-json-net\r\n\r\n\r\nGood Luck!"
    },
    {
      "ansID": 1698,
      "ans": "  public class results\r\n    {\r\n        public string company\r\n        {\r\n            get;\r\n            set;\r\n        }      \r\n        public string City\r\n        {\r\n            get;\r\n            set;\r\n        }\r\n        public string State\r\n        {\r\n            get;\r\n            set;\r\n        }\r\n    }\r\n    public class JsonTest\r\n    {\r\n        public JsonTest()\r\n        {\r\n            results \u003d new List\u003cresults\u003e();\r\n        }\r\n        public string version\r\n        {\r\n            get;\r\n            set;\r\n        }\r\n        public string query\r\n        {\r\n            get;\r\n            set;\r\n        }\r\n        public string begin\r\n        {\r\n            get;\r\n            set;\r\n        }\r\n        public string end\r\n        {\r\n            get;\r\n            set;\r\n        }\r\n        public string totalResults\r\n        {\r\n            get;\r\n            set;\r\n        }\r\n        public string pageNumber\r\n        {\r\n            get;\r\n            set;\r\n        }\r\n        public List\u003cresults\u003e results\r\n        {\r\n            get;\r\n            set;\r\n        }\r\n\r\n\r\nJavaScriptSerializer _Serialize \u003d new JavaScriptSerializer();\r\n            JsonTest _JsonTest \u003d new JsonTest();\r\n            _JsonTest \u003d (JsonTest)_Serialize.Deserialize(jsoN, typeof(JsonTest));\r\n\r\n\r\n\r\n"
    },
    {
      "ansID": 1703,
      "ans": "So the result set is returned as a named object  \u0027Results \u0027 as shown above.  If I were to call the web service from jQuery AJAX it would be:\r\n\r\nvar url \u003d  \u0027/Companies.svc/GetCompanies \u0027;\r\n\r\n\r\n        $(document).ready(function () {\r\n            $.ajax({\r\n                type:  \u0027POST \u0027,\r\n                url: url,\r\n                contentType:  \u0027application/json; charset\u003dutf-8 \u0027,\r\n                data:  \u0027{} \u0027,\r\n                datatype: \u0027json\u0027,\r\n                timeout: 10000,\r\n                success: function (data) {\r\n                    alert(data.Results[0].Company);\r\n                }\r\n            });\r\n        });\r\n//which should return the company name of the first object\r\n//you can obviously iterate through the company objects\r\n//and pass them to a .NET function in the web service that\r\n//takes the properties as parameters and spits out a new\r\n//Company object an then add that to a List\u003cCompany\u003e\r\n//it\u0027s an extra step but a solution none the less\r\n\r\n\r\n "
    }
  ]
}