{
  "id": 1404,
  "url": "www.dofactory.com/topic/1404/is-it-proper-factory-pattern.aspx",
  "title": "Code review: is this code a proper Factory Pattern?",
  "ques": "Hi I am desiging one small project in .NET in that I want to implemet a Factory Pattern to create a instance of a manager at one place, Please review my code attached and suggest if there is a better way. \r\n\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Text;\r\n\r\nnamespace ConsoleApplication2\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            IManager _manager \u003d new ManagerFactory();\r\n            _manager.StundentManager.SaveData();\r\n            _manager.FeeManager.SaveFee();\r\n            Console.ReadLine();\r\n        }\r\n    }\r\n\r\n    interface IStudentManager\r\n    {\r\n        void SaveData();\r\n        int GetStudentID(string studentName);\r\n    }\r\n\r\n    interface IFeeManager\r\n    {\r\n        void SaveFee();\r\n    }\r\n\r\n    class StudentManager : IStudentManager\r\n    {\r\n        #region IStudentManager Members\r\n\r\n        public void SaveData()\r\n        {\r\n            Console.WriteLine(\u0027Data Saved\u0027);\r\n        }\r\n\r\n        public int GetStudentID(string studentName)\r\n        {\r\n            return 0;\r\n        }\r\n\r\n        #endregion\r\n    }\r\n\r\n    class FeeManager : IFeeManager\r\n    {\r\n        #region IFeeManager Members\r\n\r\n        public void SaveFee()\r\n        {\r\n            Console.WriteLine(\u0027Fee Saved\u0027);\r\n        }\r\n\r\n        #endregion\r\n    }\r\n\r\n\r\n    interface IManager\r\n    {\r\n        IStudentManager StundentManager { get; }\r\n        IFeeManager FeeManager { get; }\r\n    }\r\n\r\n    class ManagerFactory : IManager\r\n    {\r\n\r\n        #region IManager Members\r\n\r\n        public IStudentManager StundentManager\r\n        {\r\n            get { return new StudentManager(); }\r\n        }\r\n\r\n        #endregion\r\n\r\n        #region IManager Members\r\n\r\n\r\n        public IFeeManager FeeManager\r\n        {\r\n            get { return new FeeManager(); }\r\n        }\r\n\r\n        #endregion\r\n    }\r\n}\r\n\r\n\r\n ",
  "answers": [
    {
      "ansID": 1568,
      "ans": "Not being aware of the domain problem at hand, here\u0027s a stab at the code...\r\n\r\nTo begin with, do you intend to have only one implementation of IStudentManager and one of IFeeManager? If yes, then implementing a factory pattern seems like overkill to me.\r\n\r\nIn any case, I\u0027ve rewritten the code a bit with a factory using generics to simplify it a bit. Also focusing only on the IStudentManager interface... the principle is the same for IFeeManager. Using this kind of factory makes it easier to add new implementations of IStudentManager, since you do not need to change it.\r\n\r\nBe aware, thought, that there are multiple ways in which you can implement a factory pattern. This is just one of them.\r\n\r\n\r\nHope that helps.\r\n\r\n\r\n\r\n\r\n\r\npublic class DoFactory {\r\n        public static void Work() {\r\n            ManagerFactory.CreateStudenManager\u003cBachelorStudentManager\u003e().SaveData();\r\n            ManagerFactory.CreateStudenManager\u003cMasterStudentManager\u003e().SaveData();\r\n        }\r\n\r\n        private interface IStudentManager {\r\n            void SaveData();\r\n            int GetStudentId(string studentName);\r\n        }\r\n\r\n        private class BachelorStudentManager : IStudentManager {\r\n            public void SaveData() {\r\n                Console.WriteLine( \u0027Saving Bachelor Student Data \u0027);\r\n            }\r\n            public int GetStudentId(string studentName) {\r\n                return 0;\r\n            }\r\n\r\n        }\r\n\r\n        private class MasterStudentManager : IStudentManager {\r\n            public void SaveData() {\r\n                Console.WriteLine( \u0027Saving Master Student Data \u0027);\r\n            }\r\n            public int GetStudentId(string studentName) {\r\n                return 1;\r\n            }\r\n        }\r\n\r\n        private static class ManagerFactory {\r\n            public static IStudentManager CreateStudenManager \u003cT\u003e() {\r\n                return (IStudentManager) Activator.CreateInstance(typeof(T));\r\n            }\r\n        }\r\n    }\r\n\r\n "
    }
  ]
}