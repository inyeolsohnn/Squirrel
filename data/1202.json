{
  "id": 1202,
  "url": "www.dofactory.com/topic/1202/factory-patterns-abstract-factory-factory-method-simple-factory.aspx",
  "title": "Factory Patterns... Abstract Factory, Factory Method, Simple Factory...",
  "ques": "I have an object model specifically for seeing how I could implement the Factory patterns. I would like any comments or any alternatives or suggestions to improve on this design. I have a couple question below the code.\r\n\r\nThe model is simple enough and is a representation of a business phone. You have an agent login to participate in call distribution, ringer tone (ringtone) and phone properties. The high level structure is as follows:\r\n\r\nStatus:\r\n- AgentStatus\r\n- PhoneStatus\r\n- RingerStatus\r\n\r\n\r\nNamespace Factory\r\n\r\n       Namespace Items\r\n\r\n           Namespace Agent\r\n\r\n               Public Enum States\r\n                   available\r\n                   unavailable\r\n               End Enum\r\n\r\n               Public Class AgentStatus\r\n\r\n                   Dim _state As States\r\n                   Public Property State() As States\r\n                       Get\r\n                           Return _state\r\n                       End Get\r\n                       Set(ByVal value As States)\r\n                           _state \u003d value\r\n                       End Set\r\n                   End Property\r\n\r\n               End Class\r\n\r\n               Public Class AgentStatusFactory\r\n                   Public Shared Function Parse(ByVal status As System.Xml.Linq.XElement) As AgentStatus\r\n\r\n                       Dim agentStatus As New AgentStatus()\r\n                       agentStatus.State \u003d [Enum].Parse(GetType(States), status.Attribute(\u0027state\u0027))\r\n\r\n                       Return agentStatus\r\n\r\n                   End Function\r\n               End Class\r\n\r\n           End Namespace\r\n\r\n           Namespace Phone\r\n\r\n               Public Class PhoneStatus\r\n\r\n                   Private _model As String\r\n                   \u0027\u0027\u0027 \u003csummary\u003e\r\n                   \u0027\u0027\u0027 Model number of phone\r\n                   \u0027\u0027\u0027 \u003c/summary\u003e\r\n                   Public Property Model() As String\r\n                       Get\r\n                           Return _model\r\n                       End Get\r\n                       Set(ByVal value As String)\r\n                           _model \u003d value\r\n                       End Set\r\n                   End Property\r\n\r\n                   Private _serial As String\r\n                   \u0027\u0027\u0027 \u003csummary\u003e\r\n                   \u0027\u0027\u0027 Serial number of phone\r\n                   \u0027\u0027\u0027 \u003c/summary\u003e\r\n                   Public Property Serial() As String\r\n                       Get\r\n                           Return _serial\r\n                       End Get\r\n                       Set(ByVal value As String)\r\n                           _serial \u003d value\r\n                       End Set\r\n                   End Property\r\n\r\n                   Private _mac As String\r\n                   \u0027\u0027\u0027 \u003csummary\u003e\r\n                   \u0027\u0027\u0027 MAC address of phone\u0027s NIC adapter\r\n                   \u0027\u0027\u0027 \u003c/summary\u003e\r\n                   Public Property Mac() As String\r\n                       Get\r\n                           Return _mac\r\n                       End Get\r\n                       Set(ByVal value As String)\r\n                           _mac \u003d value\r\n                       End Set\r\n                   End Property\r\n\r\n               End Class\r\n\r\n               Public Class PhoneStatusFactory\r\n                   Public Shared Function Parse(ByVal status As System.Xml.Linq.XElement) As PhoneStatus\r\n\r\n                       Dim phoneStatus As New PhoneStatus\r\n\r\n                       phoneStatus.Model \u003d status.Attribute(\u0027model\u0027)\r\n                       phoneStatus.Serial \u003d status.Attribute(\u0027serial\u0027)\r\n                       phoneStatus.Mac \u003d status.Attribute(\u0027mac\u0027)\r\n\r\n                       Return phoneStatus\r\n\r\n                   End Function\r\n               End Class\r\n\r\n           End Namespace\r\n\r\n           Namespace Ringer\r\n\r\n               Public Class RingerStatus\r\n\r\n                   Dim _tone As String\r\n                   Public Property Tone() As String\r\n                       Get\r\n                           Return _tone\r\n                       End Get\r\n                       Set(ByVal value As String)\r\n                           _tone \u003d value\r\n                       End Set\r\n                   End Property\r\n\r\n               End Class\r\n\r\n               Public Class RingerStatusFactory\r\n                   Public Shared Function Parse(ByVal status As XElement) As RingerStatus\r\n\r\n                       Dim ringerStatus As New RingerStatus()\r\n\r\n                       ringerStatus.Tone \u003d status.Attribute(\u0027tone\u0027)\r\n                       Return ringerStatus\r\n\r\n                   End Function\r\n               End Class\r\n\r\n           End Namespace\r\n\r\n       End Namespace\r\n\r\n       Namespace DataSource\r\n\r\n           Public Class Status\r\n\r\n               Private _agentStatus As Items.Agent.AgentStatus\r\n               Public Property AgentStatus() As Items.Agent.AgentStatus\r\n                   Get\r\n                       Return _agentStatus\r\n                   End Get\r\n                   Set(ByVal value As Items.Agent.AgentStatus)\r\n                       _agentStatus \u003d value\r\n                   End Set\r\n               End Property\r\n\r\n               Private _phoneStatus As Items.Phone.PhoneStatus\r\n               Public Property PhoneStatus() As Items.Phone.PhoneStatus\r\n                   Get\r\n                       Return _phoneStatus\r\n                   End Get\r\n                   Set(ByVal value As Items.Phone.PhoneStatus)\r\n                       _phoneStatus \u003d value\r\n                   End Set\r\n               End Property\r\n\r\n               Private _ringerStatus As Items.Ringer.RingerStatus\r\n               Public Property RingerStatus() As Items.Ringer.RingerStatus\r\n                   Get\r\n                       Return _ringerStatus\r\n                   End Get\r\n                   Set(ByVal value As Items.Ringer.RingerStatus)\r\n                       _ringerStatus \u003d value\r\n                   End Set\r\n               End Property\r\n\r\n           End Class\r\n\r\n           Public Class StatusFactory\r\n\r\n               \u0027 Values come from devices over the network and recieve as XML.\r\n               Private phoneStatus As System.Xml.Linq.XElement \u003d XElement.Parse(\u0027\u003cphone mac\u003d\u0027\u0027000000000000\u0027\u0027 model\u003d\u0027\u00271977\u0027\u0027 serial\u003d\u0027\u002700012345677\u0027\u0027 /\u003e\u0027)\r\n               Private agentStatus As System.Xml.Linq.XElement \u003d XElement.Parse(\u0027\u003cagent state\u003d\u0027\u0027available\u0027\u0027 /\u003e\u0027)\r\n               Private ringerStatus As System.Xml.Linq.XElement \u003d XElement.Parse(\u0027\u003cringer tone\u003d\u0027\u0027New Wave\u0027\u0027 /\u003e\u0027)\r\n\r\n               Public Function Parse() As Status\r\n\r\n                   Dim s As New Status\r\n                   s.AgentStatus \u003d Items.Agent.AgentStatusFactory.Parse(agentStatus)\r\n                   s.PhoneStatus \u003d Items.Phone.PhoneStatusFactory.Parse(phoneStatus)\r\n                   s.RingerStatus \u003d Items.Ringer.RingerStatusFactory.Parse(ringerStatus)\r\n\r\n                   Return s\r\n\r\n               End Function\r\n\r\n           End Class\r\n\r\n       End Namespace\r\n\r\n   End Namespace\r\nConcerns/Questions:\r\n\r\n1. This utilizes the Factory Method pattern since I have the \u0027Parse\u0027 function that returns a new object, right?\r\n2. Since I do not have direct values that do not require additional processing I wanted to remove passing XML to the constructor. I thought this is exactly what a Factory is for. Typically I only use a contruction if I have actual valid property values that do not require extra work?\r\n3. I cannot be for certain, but would this be considered a Abstract Factory? What would be required to make it so? I know I could use an Interface, but wanted to keep the methods as Shared/Static and you cannot have a SharedVirtual signature in an Interface. The reason I wanted them shared is becuase it looks cleaner and do not need to instanciate the Factory objects to return the various status objects. Does this even matter, is there a preference?\r\n4. What other creational patterns would be better suited? Builder?\r\n5. Any other suggestions on the model design?\r\n\r\nTIA,\r\n\r\nSteve\r\n ",
  "answers": [
    {
      "ansID": 1312,
      "ans": "1. The intent of factory method pattern is to  \u0027Define an interface for creating an object, but let subclasses decide which class to instantiate \u0027. Whereas when if i see the source code  AgentStatusFactory class defining the  \u0027Parse \u0027 function and returning the instance of AgentStatus class. After checking the source code i would say this is just a variation of factory method pattern which we can call it as simple factory pattern. If the mentioned structure is changed according to enclosed class diagram, it will turned to be factory Method pattern.\r\n2. Yes the mentioned point is correct.\r\n3.Factory Method Pattern provides an interface for creating an object, but let subclasses decide which class to instantiate. Whereas Abstract Factory Pattern provides an interface for creating families of related or dependent objects without specifying their concrete class. Please refer to following URL.\r\nhttp://img34.imageshack.us/i/absfactory.png/\r\nhttp://www.codeproject.com/KB/architecture/FactoryPattern.aspx\r\n4. For the given scenario Factory Method pattern is best. Builder has to be used when the creation process is tedious and has to be reused. In other words Builder design pattern has to be used when the creation of a specific object  has to be done over several steps.\r\n5. I think given the secnario the above code snippets looks good in many ways maintainability/reusability. But if you could provide more information or goal you want to achieve, it would be helpful.\r\n\r\n"
    }
  ]
}