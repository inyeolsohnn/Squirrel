{
  "id": 1026,
  "url": "www.dofactory.com/topic/1026/where-to-start-with-net-design-patterns.aspx",
  "title": "Where to start with .NET Design Patterns?",
  "ques": "I have been pretty successful in my career and consider myself a solid Senior .NET Developer.\r\nRecently, I have been reading up on Design Patterns and when I see an example, I usually get it.\r\n\r\nHowever, what troubles me is that I don\u0027t really know when and where to apply them in my own work. \r\nFor example, using a Singleton or Factory does not come \u0027naturally\u0027 to me.\r\n\r\nAm I the only one, or are there other developers that have similar experiences?",
  "answers": [
    {
      "ansID": 1034,
      "ans": "Welcome to the world of design patterns, and yes you\u0027re not alone.\r\n\r\nI used to feel the same way, esp when i started, and still feel this way now. I am trying to tackle this problem in my recently started series. I am trying to explain them in terms of a scenario, so new comers will understand what should be the thought process. Yet only one on strategy pattern. Another on decorator pattern is in process.\r\n\r\nI am trying to learn from the mistakes i made, While trying my level best to make it as simple as possible, i made the pattern to much isolated. Anyway, it may help you to get started with at least one \r\n\r\nhttp://www.codeproject.com/KB/recipes/strategyPatternPrimerC.aspx"
    },
    {
      "ansID": 1050,
      "ans": "Just to let you know that i have just published another article in this series.\r\n\r\nhttp://www.codeproject.com/KB/recipes/DecoratorPrimerA.aspx\r\n\r\nThe intention behind this series i have already mentioned. Your feedback is tooooooo much welcome, as it will help me shape this series. It\u0027s a bit delayed publication. I was supposed to publish it 2 weeks before, but things came up. Anyway i am going to write another on Creational Patterns (Simple Factory, Factory Method, Abstract Factory and builder). Hopefully this won\u0027t get delayed. But feedback will be vital. Thank you"
    },
    {
      "ansID": 1053,
      "ans": "You can also check examples for abstract factory at\r\nhttp://www.dotnetpal.com/pattern/abstractfactory.html\r\n\r\nFor Factory medhod Design Pattern\r\nhttp://www.dotnetpal.com/pattern/factorypattern.html\r\n"
    },
    {
      "ansID": 1103,
      "ans": "First: Go through different types of Patterns\r\n\r\n  Father of all design patterns: GOF\r\nhttp://dofactory.com/Patterns/Patterns.aspx\r\n\r\nor\r\n\r\nhttp://www.allapplabs.com/java_design_patterns/adapter_pattern.htm\r\n\r\nSecond:Try to understand these patterns.\r\n\r\n   Third: Find out the benefits and disadvantages of each and every design patterns\r\n\r\n   Fourth: Try to use it in your applications.Before using it , think properly. And ask questions like\r\n                   1. Is appropriate patterm? 2.Why should I use it? 3.Am I getting benefits?\r\n\r\n   Fifth: If you are a dotnet developer, then try to find out which patterns are used in dotnet framework and try to understand it and ask yourself why these patterns are used.\r\n\r\n   By going through such approach , you will have better understanding of design concept.\r\n\r\n   Once you know design patterns , it doesnt mean you can use these patterns anywhere beacuse \r\n   \u003e\u003eit will increase the complexity \r\n   \u003e\u003eit will spoil structure of your project\r\n\r\n  NOTE: So always point out your design problem in your application and then think about design patterns.\r\n\r\n   So be careful while using design patterns.:) \r\n\r\n   Hope this will help you..."
    },
    {
      "ansID": 1107,
      "ans": "I\u0027d recommend you start off with the book  \u0027Head First Design Patterns \u0027 as it uses an easy-going style explaining several patterns\nhttp://oreilly.com/catalog/9780596007126\n\nGood Luck!\n\n\n\n\n"
    },
    {
      "ansID": 1191,
      "ans": "Hello fellow developer. You?re certainly not alone. Every developer goes through a stage where the cone of uncertainty is wide and confidence is low. Fear not. Clearly you sound like a dedicated developer, wholike most of us loves the art of creating practical and useful tools and such for the virtual medium. My suggestion to you is to start with a factory pattern and perhaps a dependency injection pattern. Both are relatively simple to implement and are among the most commonly used patterns.\r\nI learn best by examples so I?m going to give you a piece of an example without providing any code. I recently used a factory pattern to create a Web based app using .NET that would allow a user to upload a file that my app would need to be able to read, parse and store into a database. Initially the requirements called for only one specific file format, but I wanted to make the app scalable enough to handle many different file formats, just in case the requirements changed at some point. It?s not advisable to scope creep your own projects, but I knew I could accomplish this with minimal code addition.\r\nSo how did I solve this problem? Factory pattern to the rescue. I designed the app in such a way that the factory could choose which parser to execute depending on which file format was uploaded to the system. One of the positive side effects is that going forward, if new requirements emerge to include a new file type, the core factory code never need be modified. I simply add the definition of the file format as a custom type and add the parser code to handle the parser execution and presto, a new file format is ready to be accepted.\r\nThe dependency injection pattern comes in handy when abstracting your code for unit testing. It gives you the freedom to pass in a data source or ?instance? variable so that your base code has no concrete dependency on any specific data source. This may be something that you?re already doing, but where unaware that there was actually a pattern associated to the method, which happens a lot at first. Sometimes you might find yourself realizing that you?re already using several patterns in slight variations. Those revelations are awesome.\r\n \r\nAnyway, hope this helps. Best of luck friend.\r\n"
    },
    {
      "ansID": 1198,
      "ans": "Hm... I quickly scanned through your replies to the question above... and there\u0027s one thing I noticed and that I dislike. He explains that using specific patterns in nothing that comes naturally into his mind. Your replies basically work like  \u0027Learn about patterns, look for examples, identify pattern usage in code, etc. \u0027.\r\n\r\nI have a different suggestion:\r\nReflect your code.\r\n\r\nThats it. \r\n\r\nLong explanation:\r\nPatterns are common solutions for common problems/requirements. I believe that - before you come to understand every pattern in detail (hint: get the design pattern framework, it will help in regards to a deep understanding in this topic), you need to identify problems that you have with your code.\r\n\r\nIf everything\u0027s fine... why change? However, I guess not everything is fine... and I guess you will also guess that sometimes. And this is when pattern come into play.\r\n\r\nConsider the following situation: Imagine a class that has a set of properties and you are about to implement lets say the fifth constructor ovverride to initialize the class properly. When others come across that class they might find it difficult to understand which constructor to use and when. Here you have your problem. Because ctors MUST have the same name, you couldn\u0027t offer any design time help by for instance naming the ctors after their concrete purpose. \r\n\r\nThe solution: Factory methods. Simple declare the ctor private so that it cannot be called and implement static public Factory methods that return new instances of your class. Those can be named after their purpose.\r\n\r\nAnother example:\r\nYou are developing a classic three tier application. In your database, three tables exist that contain data that depend on eachother. For each table you have a datalayer class accessing the data and a business logic class implementing business rules. However, when you want to make use of the data you might find yourself in a situation in which your presentation layer needs to know the implementation of your complex implementation. For example it needs to update your three business objects and then persist them in the correct order (yeah, I know that there are better ways). Here you have you problem: Maybe you need to do this in different places... and actually it makes no sense that some instance of a highlevel module know about a complex implementation on the low level end.\r\n\r\nThe solution: The Facade pattern. Simply implement a class that knows your subsystem dn publishes simple methods that can be used to do whatever needs to be done... however, your high level classes do not have to know the subsystem anymore.\r\n\r\nNow I\u0027ve done it, too. Presenting examples, ... ;-)\r\n\r\nBut basically, what I really wanted to say is: Whatever you do, ask yourself if it can be done better and identify possible problems... the moment the recognize that something\u0027s going wrong or may lead to a problem, you will try finding a solution and eventually come across some pattern that solves it. The more you go this way the more you will get used to implementing those patterns right in the beginning.\r\n\r\nI know programmers who still instantiate and dispose objects manually even when they implement the IDisposable interface, instead of using the using statement... I know this has nothing to do with patterns... but it\u0027s a common way of thinking: Disposing your objects manually increases the possibility of forgetting... the using statement does this automatically instead. \r\n\r\nRegards,\r\n-Chris\r\n\r\nP.S.: More than 3000 Views... and only a hand full of replies... guys... this is entitled as a forum. Would love to see more discussion here..."
    }
  ]
}