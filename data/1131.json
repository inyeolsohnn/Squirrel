{
  "id": 1131,
  "url": "www.dofactory.com/topic/1131/is-this-a-right-approch.aspx",
  "title": "Is Strategy Pattern the right pattern for this?",
  "ques": "I have a user control for a menu, which has events for Add, Edit, Delete etc... I also have a form with five tabs. \r\nNow I need to configure the menu for each tab. There are a total of 20 events being registered, that is, 5 tabs * 4 menu buttons. \r\n\r\nI tried to achieve this using the Strategy Pattern, but I am still not sure where this is the right Pattern Approach.\r\nSo, I am looking for some guidance. Thanks in advance. \r\n\r\nThe sample code is below: \r\n\r\nusing System;  \r\nusing System.Collections.Generic;  \r\nusing System.Linq;  \r\nusing System.Text;  \r\nusing System.Reflection;  \r\n\r\nnamespace ConsoleApplication2  \r\n{  \r\n    /// \u003csummary\u003e    \r\n    /// Test Class    \r\n    /// \u003c/summary\u003e    \r\n    class Program  \r\n    {  \r\n        static void Main(string[] args)  \r\n        {  \r\n            UI ui \u003d new UI();  \r\n            ui.Call();  \r\n            Console.ReadLine();  \r\n        }  \r\n    }  \r\n\r\n      \r\n    /// \u003csummary\u003e    \r\n    /// My UI CLass    \r\n    /// \u003c/summary\u003e  \r\n    public class UI  \r\n    {  \r\n        UserControl uc1 \u003d new UserControl(ModuleName.Call);//object of User Control 1\r\n        UserControl uc2 \u003d new UserControl(ModuleName.Project);//object of User Control 2\r\n\r\n        IControlFun Ifun \u003d null;  \r\n        IController icon;  \r\n\r\n        public UI()  \r\n        {  \r\n            uc1.Add +\u003d new EventHandler(Add);  \r\n            uc1.Edit +\u003d new EventHandler(Edit);  \r\n\r\n            uc2.Add +\u003d new EventHandler(Add);  \r\n            uc2.Edit +\u003d new EventHandler(Edit);  \r\n        }  \r\n\r\n        void Add(object sender, EventArgs e)  \r\n        {  \r\n            icon \u003d (IController)sender;  \r\n            Ifun \u003d icon.GetModule();  \r\n            Ifun.Add();  \r\n        }  \r\n\r\n        void Edit(object sender, EventArgs e)  \r\n        {  \r\n            icon \u003d (IController)sender;  \r\n            Ifun \u003d icon.GetModule();  \r\n            Ifun.Edit();  \r\n        }  \r\n\r\n        public void Call()  \r\n        {  \r\n            uc1.fAdd();  \r\n            uc2.fAdd();  \r\n            uc1.fEdit();  \r\n            uc2.fEdit();  \r\n        }  \r\n    }  \r\n\r\n    /// \u003csummary\u003e    \r\n    ///Enum for Module Name    \r\n    /// \u003c/summary\u003e    \r\n    public enum ModuleName  \r\n    {  \r\n        Project,Call  \r\n    }  \r\n\r\n    /// \u003csummary\u003e    \r\n    /// Interface for User Control    \r\n    /// \u003c/summary\u003e    \r\n    public interface IController  \r\n    {  \r\n        IControlFun GetModule();  \r\n    }  \r\n\r\n    /// \u003csummary\u003e    \r\n    /// User Control    \r\n    /// \u003c/summary\u003e    \r\n    public class UserControl:IController  \r\n    {  \r\n        public event EventHandler Add;  \r\n        public event EventHandler Edit;  \r\n        ModuleName _moduleName;  \r\n        IControlFun ifun;  \r\n\r\n        public UserControl(ModuleName moduleName)  \r\n        {  \r\n            _moduleName \u003d moduleName;  \r\n        }  \r\n\r\n        public IControlFun GetModule()  \r\n        {  \r\n            switch (_moduleName)  \r\n            {  \r\n                case ModuleName.Project:  \r\n                    ifun \u003d new BL1();  \r\n                    break;  \r\n                case ModuleName.Call:  \r\n                    ifun \u003d new BL();  \r\n                    break;  \r\n            }  \r\n            return ifun;  \r\n        }  \r\n\r\n        public void fAdd()  \r\n        {  \r\n            if (Add !\u003d null)  \r\n                Add(this, new EventArgs());  \r\n        }  \r\n\r\n        public void fEdit()  \r\n        {  \r\n            if (Edit !\u003d null)  \r\n                Edit(this, new EventArgs());  \r\n        }  \r\n    }  \r\n    /// \u003csummary\u003e\r\n    /// BL logic for Module one\r\n    /// \u003c/summary\u003e    \r\n    public class BL:IControlFun  \r\n    {  \r\n\r\n        public void Add()  \r\n        {  \r\n            Console.WriteLine(\u0027Adding of first control\u0027);  \r\n        }  \r\n\r\n        public void Edit()  \r\n        {  \r\n            Console.WriteLine(\u0027Editing of first control\u0027);  \r\n        }  \r\n    }  \r\n\r\n    /// \u003csummary\u003e    \r\n    /// BL logic for Module two    \r\n    /// \u003c/summary\u003e    \r\n    public class BL1 : IControlFun  \r\n    {  \r\n\r\n        public void Add()  \r\n        {  \r\n            Console.WriteLine(\u0027Adding of second control\u0027);  \r\n        }  \r\n\r\n        public void Edit()  \r\n        {  \r\n            Console.WriteLine(\u0027Editing of second control\u0027);  \r\n        }  \r\n    }  \r\n\r\n    /// \u003csummary\u003e    \r\n    /// Interface for BL    \r\n    /// \u003c/summary\u003e    \r\n    public interface IControlFun  \r\n    {  \r\n         void Add();  \r\n         void Edit();  \r\n    }  \r\n}  \r\n\r\n ",
  "answers": [
    {
      "ansID": 1202,
      "ans": "Just my thought on this.  I don\u0027t see any issue with what you have presented.  Thinking in terms of your code what areas are likely to change?\r\nJust an observation.  Your  \u0027GetModule \u0027 function seems to be fragile as that may change because that is a  \u0027switch \u0027 statement.  Abstract that away to a factory and your design will adhere to the  \u0027OCP (Open/Closed) \u0027 principle as you add functionality without modifying or breaking existing code.\r\n\r\nYour use of Strategy pattern for BL can be justified because you are just trying to abstract away the algorithms (in this case business rules) that varies.  But if your BL are an extension of existing business rules you can combine that with  \u0027decorator \u0027 as well.\r\n\r\n \u0027Others can comment as well \u0027.\r\n\r\nSome other thoughts:\r\nMenus and actions can be tied up using the  \u0027Command \u0027 pattern as well.\r\n\r\n\r\nRegards,\r\nRajesh Pillai"
    }
  ]
}