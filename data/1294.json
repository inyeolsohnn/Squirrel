{
  "id": 1294,
  "url": "www.dofactory.com/topic/1294/composite-pattern-displaying-in-treeview.aspx",
  "title": "Composite pattern \u0026 Displaying in treeview",
  "ques": "I have a XML file which contains the data and my application needs to parse the XML file and display the data in to the tree view in parent- child hierarchy. The XML looks like below.\r\n\r\n\u003c?xml version\u003d\u00271.0\u0027 encoding\u003d\u0027utf-8\u0027?\u003e\r\n\u003cFragment\u003e   \r\n    \u003cFeature Title\u003d\u0027Main1\u0027 Id\u003d\u0027Main_First\u0027 Description\u003d\u0027FeatureDesc_1\u0027 Level\u003d\u00273\u0027 AllowAdvertise\u003d\u0027no\u0027 Display\u003d\u0027hidden\u0027 \u003e\r\n        \u003cFeature Title\u003d\u0027Main1Child1\u0027 Id\u003d\u0027Main_FirstC1\u0027 Description\u003d\u0027FeatureDesc_11\u0027 Level\u003d\u00273\u0027 AllowAdvertise\u003d\u0027no\u0027 Display\u003d\u0027hidden\u0027 /\u003e\r\n        \u003cFeature Title\u003d\u0027Main1Child2\u0027 Id\u003d\u0027Main_FirstC2\u0027 Description\u003d\u0027FeatureDesc_12\u0027 Level\u003d\u00273\u0027 AllowAdvertise\u003d\u0027no\u0027 Display\u003d\u0027Show\u0027 /\u003e\r\n        \u003cFeature Title\u003d\u0027Main1Child3\u0027 Id\u003d\u0027Main_FirstC3\u0027 Description\u003d\u0027FeatureDesc_13\u0027 Level\u003d\u00273\u0027 AllowAdvertise\u003d\u0027no\u0027 Display\u003d\u0027Show\u0027 /\u003e\r\n    \u003c/Feature\u003e\r\n    \u003cFeature Title\u003d\u0027Main2\u0027 Id\u003d\u0027Main_Second\u0027 Description\u003d\u0027FeatureDesc_2\u0027 Level\u003d\u00273\u0027 AllowAdvertise\u003d\u0027no\u0027 Display\u003d\u0027hidden\u0027 /\u003e\r\n    \u003cFeature Title\u003d\u0027Main3\u0027 Id\u003d\u0027Main_Third\u0027 Description\u003d\u0027FeatureDesc_3\u0027 Level\u003d\u00273\u0027 AllowAdvertise\u003d\u0027no\u0027 Display\u003d\u0027hidden\u0027 /\u003e\r\n        \u003cFeature Title\u003d\u0027Main3Child1\u0027 Id\u003d\u0027Main_FirstC1\u0027 Description\u003d\u0027FeatureDesc_31\u0027 Level\u003d\u00273\u0027 AllowAdvertise\u003d\u0027no\u0027 Display\u003d\u0027hidden\u0027 /\u003e\r\n        \u003cFeature Title\u003d\u0027Main3Child2\u0027 Id\u003d\u0027Main_FirstC2\u0027 Description\u003d\u0027FeatureDesc_32\u0027 Level\u003d\u00273\u0027 AllowAdvertise\u003d\u0027no\u0027 Display\u003d\u0027hidden\u0027 /\u003e\r\n        \u003cFeature Title\u003d\u0027Main3Child3\u0027 Id\u003d\u0027Main_FirstC3\u0027 Description\u003d\u0027FeatureDesc_33\u0027 Level\u003d\u00273\u0027 AllowAdvertise\u003d\u0027no\u0027 Display\u003d\u0027hidden\u0027 /\u003e\r\n    \u003cFeature Title\u003d\u0027Main4\u0027 Id\u003d\u0027Main_Fourth\u0027 Description\u003d\u0027FeatureDesc_4\u0027 Level\u003d\u00273\u0027 AllowAdvertise\u003d\u0027no\u0027 Display\u003d\u0027hidden\u0027 /\u003e    \r\n \u003c/Fragment\u003e\r\n\r\nI have created the CFeature class with members of Title, Id, Description, Level, AllowAdvertise, Display and array of CFeature objects to store the child objects if it has any.\r\n\r\nI want to use composite pattern to do this. Can any one suggest how to do this?\r\n",
  "answers": [
    {
      "ansID": 1401,
      "ans": "Hello mutpan,\r\n\r\nyou can implement composite pattern as in DoFactory method. I have created a sample program. Please have a look. :-)\r\n\r\n\r\n\r\nnamespace DesignPattern.Composite\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            Tree tree \u003d new Tree();\r\n            CFeature cTree \u003d tree.GetTreeStructure();\r\n            cTree.Display(1);\r\n            Console.Read();\r\n        }\r\n    }\r\n\r\n    class Tree\r\n    {\r\n        public CFeature GetTreeStructure()\r\n        {\r\n            XmlDocument xDoc \u003d new XmlDocument();\r\n            xDoc.Load( \u0027data.xml \u0027);\r\n            XmlNode root \u003d xDoc.DocumentElement;\r\n            CFeature cFeature \u003d new CFeature(root.Name,  \u0027 \u0027,  \u0027 \u0027,  \u0027 \u0027,  \u0027 \u0027,  \u0027 \u0027);\r\n            CreateTreeStructure(root, cFeature);\r\n            return cFeature;\r\n        }\r\n\r\n        private void CreateTreeStructure(XmlNode node, AbstractFeature cFeature)\r\n        {\r\n            if (node.HasChildNodes)\r\n            {\r\n                foreach (XmlNode cNode in node.ChildNodes)\r\n                {\r\n                    AbstractFeature cFeature1 \u003d null;\r\n                    if (cNode.HasChildNodes)\r\n                    {\r\n                        cFeature1 \u003d new CFeature(cNode.Attributes[ \u0027Title \u0027].Value, cNode.Attributes[ \u0027Id \u0027].Value,\r\n                                                cNode.Attributes[ \u0027Description \u0027].Value, cNode.Attributes[ \u0027Level \u0027].Value,\r\n                                                cNode.Attributes[ \u0027AllowAdvertise \u0027].Value, cNode.Attributes[ \u0027Display \u0027].Value);\r\n\r\n                        cFeature.Add(cFeature1);\r\n                        CreateTreeStructure(cNode, cFeature1);\r\n                    }\r\n                    else\r\n                        cFeature.Add(new Feature(cNode.Attributes[ \u0027Title \u0027].Value, cNode.Attributes[ \u0027Id \u0027].Value,\r\n                                                               cNode.Attributes[ \u0027Description \u0027].Value, cNode.Attributes[ \u0027Level \u0027].Value,\r\n                                                               cNode.Attributes[ \u0027AllowAdvertise \u0027].Value, cNode.Attributes[ \u0027Display \u0027].Value));\r\n                }\r\n            }\r\n            else\r\n            {\r\n                cFeature.Add(new Feature(node.Attributes[ \u0027Title \u0027].Value, node.Attributes[ \u0027Id \u0027].Value,\r\n                                       node.Attributes[ \u0027Description \u0027].Value, node.Attributes[ \u0027Level \u0027].Value,\r\n                                       node.Attributes[ \u0027AllowAdvertise \u0027].Value, node.Attributes[ \u0027Display \u0027].Value));\r\n            }\r\n        }\r\n    }\r\n\r\n    abstract class AbstractFeature\r\n    {\r\n        public AbstractFeature(string title, string id, string description, string level, string allowAdvertise, string display)\r\n        {\r\n            _title \u003d title;\r\n            _id \u003d id;\r\n            _description \u003d description;\r\n            _level \u003d level;\r\n            _allowAdvertise \u003d allowAdvertise;\r\n            _display \u003d display;\r\n        }\r\n\r\n        public virtual void Display(int indent)\r\n        {\r\n            Console.WriteLine(new String(\u0027-\u0027, indent) + String.Format( \u0027Title: {0}, Id: {1}, Description: {2}, Level: {3}, AllowAdvertise: {4}, Display: {5} \u0027,\r\n                 _title, _id, _description, _level, _allowAdvertise, _display));\r\n        }\r\n\r\n        public abstract void Add(AbstractFeature feature);\r\n\r\n        public abstract IEnumerator GetEnumerator();\r\n\r\n        protected string _title;\r\n        protected string _id;\r\n        protected string _description;\r\n        protected string _level;\r\n        protected string _allowAdvertise;\r\n        protected string _display;\r\n    }\r\n\r\n    class Feature : AbstractFeature\r\n    {\r\n        public Feature(string title, string id, string description, string level, string allowAdvertise, string display)\r\n            : base(title, id, description, level, allowAdvertise, display)\r\n        { }\r\n\r\n        public override void Add(AbstractFeature feature)\r\n        {\r\n            // Not useful\r\n        }\r\n\r\n        public override IEnumerator GetEnumerator()\r\n        {\r\n            return null;\r\n        }\r\n\r\n    }\r\n\r\n    class CFeature : AbstractFeature, IEnumerable\r\n    {\r\n\r\n        public CFeature(string title, string id, string description, string level, string allowAdvertise, string display)\r\n            : base(title, id, description, level, allowAdvertise, display)\r\n        {\r\n            _children \u003d new List\u003cAbstractFeature\u003e(0);\r\n        }\r\n\r\n        public override void Add(AbstractFeature feature)\r\n        {\r\n            _children.Add(feature);\r\n        }\r\n\r\n        public override void Display(int indent)\r\n        {\r\n            Display(this, indent);\r\n        }\r\n\r\n        private void Display(CFeature cFeature, int indent)\r\n        {\r\n            Console.WriteLine(new String(\u0027-\u0027, indent) +  \u0027+ \u0027 + String.Format( \u0027Title: {0}, Id: {1}, Description: {2}, Level: {3}, AllowAdvertise: {4}, Display: {5} \u0027,\r\n                 _title, _id, _description, _level, _allowAdvertise, _display));\r\n\r\n            foreach (AbstractFeature f in this)\r\n            {\r\n                f.Display(indent + 2);\r\n            }\r\n        }\r\n\r\n        public override IEnumerator GetEnumerator()\r\n        {\r\n            return _children.GetEnumerator();\r\n        }\r\n\r\n        private List\u003cAbstractFeature\u003e _children;\r\n    }\r\n}\r\n\r\n "
    }
  ]
}