{
  "id": 1223,
  "url": "www.dofactory.com/topic/1223/regarding-data-objects.aspx",
  "title": "Mapping Business Objects to Data Model",
  "ques": "Hi all,\r\n\r\nI have a question regarding the mapping of Business Objects vs table in the database. \r\nSay, I have a table User with following fields: UserID, FName, LName, EMailID, UserName, Password, CompanyID, RoleID\r\n\r\nIn one case I need to get all fields from the Database \u0026 using the following code we can convert those rows into an IList of User Business Objects:\r\n\r\nprivate UserDetails MakeUsers(DataRow row) \r\n{ \r\n   int userId \u003d int.Parse(row[\u0027UserID\u0027].ToString()); \r\n   string firstName \u003d row[\u0027FirstName\u0027].ToString(); \r\n   string lastName \u003d row[\u0027LastName\u0027].ToString(); \r\n   string userName \u003d row[\u0027UserName\u0027].ToString(); \r\n   string eMailID \u003d row[\u0027EMailID\u0027].ToString(); \r\n   int roleID \u003d int.Parse(row[\u0027RoleID\u0027].ToString()); \r\n   int locationID \u003d int.Parse(row[\u0027LocationID\u0027].ToString()); \r\n   return new UserDetails(userId, firstName, lastName, userName, eMailID, roleID, locationID); \r\n} \r\nBut sometimes we need only 2 fields. How do we handle this? We cannot use above code to do the same. \r\nWhat is the suggested approach?\r\n\r\nThanks,\r\nRajesh Prabhu S",
  "answers": [
    {
      "ansID": 1325,
      "ans": "Rajesh: \r\n\r\nThis is the modern approach to writing SQL: you only access entire rows in a table. In other words, you don\u0027t just SELECT two columns and UPDATE perhaps one (if only one was changed by the user). You look at the row as a unit of work, i.e. business object.\r\n\r\nClearly, this causes redundancy. For example, in a screen in which someone updates a User, rarely all columns are changed, but you do SELECT and UPDATE all columns in each transaction. \r\n\r\nHowever, the advantage of doing this is it greatly simplifies your code because all you need is one SELECT, one UPDATE, and one DELETE method and with these you fundamentally cover all scenarios. (in reality you may have a few more methods, but not many, look at the Reposity pattern for examples of this).\r\n\r\nHope this helps.\r\n"
    },
    {
      "ansID": 1334,
      "ans": "You can use wrapper class around DataRow and select and update all fields.\r\n\r\nExample UserData is wrapper class and User business class extends UserData class.\r\n\r\nDatabase layer:\r\n\r\n\r\n          public class Database\r\n              {\r\n                  protected static String tableName;\r\n\r\n                  public static DataRow load(Int32? id)\r\n                  {\r\n                      DataRow result \u003d null;\r\n\r\n                      //TODO select from tableName\r\n\r\n                      return result;\r\n                  }\r\n\r\n                  public static void save(DataRow dataRow)\r\n                  {\r\n                      if (dataRow[ \u0027ID \u0027] \u003d\u003d DBNull.Value)\r\n                      {\r\n                          //TODO insert dataRow into tableName\r\n                      }\r\n                      else\r\n                      {\r\n                          //TODO update dataRow into tableName\r\n                      }\r\n                  }\r\n              }\r\n\r\n\r\n         public class UserDatabase : Database\r\n             {\r\n                 new private static String tableName \u003d  \u0027User \u0027;\r\n             }\r\n\r\n\r\n        public class AddressDatabase : Database\r\n            {\r\n                new private static String tableName \u003d  \u0027Address \u0027;\r\n            }\r\nData layer:\r\n\r\n\r\n       public class UserData\r\n           {\r\n               private DataRow dataRow;\r\n\r\n               public UserData()\r\n               {\r\n               }\r\n\r\n               public UserData(DataRow dataRow)\r\n               {\r\n                   this.dataRow \u003d dataRow;\r\n               }\r\n\r\n               public DataRow DataRow\r\n               {\r\n                   get { return dataRow; }\r\n                   set { dataRow \u003d value; }\r\n               }\r\n\r\n               public Int32? ID\r\n               {\r\n                   get { return dataRow[ \u0027ID \u0027] !\u003d DBNull.Value ? (Int32?)dataRow[ \u0027ID \u0027] : null; }\r\n                   set { dataRow[ \u0027ID \u0027] \u003d value; }\r\n               }\r\n\r\n               public String UserName\r\n               {\r\n                   get { return dataRow[ \u0027UserName \u0027] !\u003d DBNull.Value ? (String)dataRow[ \u0027UserName \u0027] : null; }\r\n                   set { dataRow[ \u0027UserName \u0027] \u003d value; }\r\n               }\r\n\r\n               public String Password\r\n               {\r\n                   get { return dataRow[ \u0027Password \u0027] !\u003d DBNull.Value ? (String)dataRow[ \u0027Password \u0027] : null; }\r\n                   set { dataRow[ \u0027Password \u0027] \u003d value; }\r\n               }\r\n\r\n               public Int32? AddressID\r\n               {\r\n                   get { return dataRow[ \u0027AddressID \u0027] !\u003d DBNull.Value ? (Int32?)dataRow[ \u0027AddressID \u0027] : null; }\r\n                   set { dataRow[ \u0027AddressID \u0027] \u003d value; }\r\n               }\r\n           }\r\n\r\n\r\n      public class AddressData\r\n          {\r\n              private DataRow dataRow;\r\n\r\n              public AddressData()\r\n              {\r\n              }\r\n\r\n              public AddressData(DataRow dataRow)\r\n              {\r\n                  this.dataRow \u003d dataRow;\r\n              }\r\n\r\n              public DataRow DataRow\r\n              {\r\n                  get { return this.dataRow; }\r\n                  set { this.dataRow \u003d value; }\r\n              }\r\n\r\n              public Int32? ID\r\n              {\r\n                  get { return dataRow[ \u0027ID \u0027] !\u003d DBNull.Value ? (Int32?)dataRow[ \u0027ID \u0027] : null; }\r\n                  set { dataRow[ \u0027ID \u0027] \u003d value; }\r\n              }\r\n\r\n              public String Street\r\n              {\r\n                  get { return dataRow[ \u0027Street \u0027] !\u003d DBNull.Value ? (String)dataRow[ \u0027Street \u0027] :  \u0027 \u0027; }\r\n                  set { dataRow[ \u0027Street \u0027] \u003d value; }\r\n              }\r\n          }\r\nBusiness layer:\r\n\r\n\r\n     public class Address : AddressData\r\n         {\r\n             public Address() : base()\r\n             {\r\n             }\r\n\r\n             public Address(DataRow dataRow) : base(dataRow)\r\n             {\r\n             }\r\n\r\n             public void save()\r\n             {\r\n                 AddressDatabase.save(this.DataRow);\r\n             }\r\n         }\r\n\r\n\r\n    public class User : UserData\r\n        {\r\n            private Address address;\r\n\r\n            public User() : base()\r\n            {\r\n            }\r\n\r\n            public User(DataRow dataRow) : base(dataRow)\r\n            {\r\n            }\r\n\r\n            public Address Address\r\n            {\r\n                get\r\n                {\r\n                    if (address \u003d\u003d null \u0026\u0026 this.AddressID !\u003d null)\r\n                    {\r\n                        this.address \u003d new Address(AddressDatabase.load(this.AddressID));\r\n                    }\r\n\r\n                    return address;\r\n                }\r\n            }\r\n\r\n            public void save()\r\n            {\r\n                UserDatabase.save(this.DataRow);\r\n            }\r\n        }\r\nInitialize User:\r\n\r\n\r\nUser user \u003d new User(datarow);\r\n\r\n "
    },
    {
      "ansID": 1336,
      "ans": "I agree with Dan.  You won\u0027t get any noticeable benefit from only retrieving some columns from a single row.  However, in some cases you may have just an ID and a single field that you want to update.  If there is no other reason to instantiate the object, you might want to write a method to update just that field.  For example, an UpdateFirstName(int userId, string newUsername) method (one DB call!) that precludes the need to retrieve the row and then update it (two DB calls!).  That is obviously not object oriented, but if the efficiency is worth it you might decide to bend the rules.\r\n\r\n  A couple of other points -\r\n  1. If you know that you know the type of a field coming from the DB, you can safely cast the DataRow column.  See example 1 below.\r\n\r\n  2.  Consider using the new (.net 3.0, I think?) object initializer syntax.  See example 2 below.  It looks more elegant IMO and you don\u0027t have to write a new constructor for every variation of input parameters.\r\n\r\n//\r\n// Example 1\r\n//\r\n// has to unbox the object at row[ \u0027UserID \u0027] to an int, call int.ToString(), and then parse it!! \r\nint userId \u003d int.Parse(row[ \u0027UserID \u0027].ToString()); \r\n\r\n// Get the int directly\r\nint userId \u003d (int)row[ \u0027UserID \u0027]; \r\n\r\n\r\n//\r\n// Example 2\r\n//\r\nreturn new UserDetails() {  \r\n    UserID \u003d userId, \r\n    FirstName \u003d firstName, \r\n    ...  \r\n}; \r\n\r\n "
    }
  ]
}