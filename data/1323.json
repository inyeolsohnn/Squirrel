{
  "id": 1323,
  "url": "www.dofactory.com/topic/1323/model-view-presenter-global-state.aspx",
  "title": "Model View Presenter - Global State",
  "ques": "When implementing Model View Presenter architecture in a winforms application, where or how should global state be stored? (I am aware global state should be kept to a minimum).\r\n\r\n For example, once a user is logged in to the application, where would the custom \u0027User\u0027 object be stored?\r\n\r\n Currently I have a public static/shared variable on the Main form which I then access from other forms and pass in to the business logic layer when necessary.  The user object also has a property for \u0027AccessLevel\u0027 which is used on other forms to resrtict what users can do.\r\n\r\n However with MVP, the main objective is to have the presenter manipulate the view and communicate with the business logic layer.  Therefore would it be correct to have a static class within the \u0027Presenters\u0027 dll/assembly with a property for \u0027LoggedInUser\u0027 which would give all \u0027presenters\u0027 access to the user object to allow them to change \u0027views\u0027 as necessary and also allow \u0027presenters\u0027 to pass user details to the business logic layer when needed?\r\n\r\n Any other ideas?\r\n\r\n\r\n For info - Solution Structure:\r\n\r\n UI                        (exe - references Views, Presenters and Business Objects)\r\n Views                  (dll - containing view interfaces)\r\n Presenters             (dll - references Views, Business Objects and Business Logic)\r\n Business Objects (dll)\r\n Business Logic    (dll - references Business Objects and Data Access)\r\n Data Access        (dll - references Business Objects)\r\n\r\n\r\n Any help would be appreciated.",
  "answers": [
    {
      "ansID": 1446,
      "ans": "I personally put it in the Model.cs since all my views bind to Presenter.cs in some way.\r\n\r\n\r\npublic class TabbedPresenter\u003cT\u003e : Presenter\u003cT\u003e where T : ITabPageView, IView \r\n{ \r\n   public TabbedPresenter(T view) : base(view) {} \r\n\r\n   protected virtual void WireUpEvents() \r\n   { \r\n       if (Model.IsUserAllowedAccess( \u0027Edit \u0027)) \r\n       { \r\n           editOption.Enabled  \u003d true; \r\n           editOption.Click +\u003d new EventHandler(View.OnEditClick); \r\n       } \r\n   }\r\n   protected virtual void TearDownEvents() \r\n   { \r\n       editOption.Enabled \u003d false; \r\n       editOption.Click -\u003d new EventHandler(View.OnEditClick); \r\n   }  \r\n} \r\n\r\nThe  \u0027IsUserAllowedAccess \u0027 method in Model.cs calls on a static instance of UserSession class.  Now it is accessible by all my views and forms.\r\n "
    }
  ]
}