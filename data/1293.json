{
  "id": 1293,
  "url": "www.dofactory.com/topic/1293/help-with-using-mvc-and-entity-frameworkr.aspx",
  "title": "Help with using MVC and Entity Framework",
  "ques": "Hi guys,\r\n\r\nI have come here after getting some assistance in the news groups, but I am looking for help with my current Design in finding a suitable Design Pattern to learn, and maybe apply to my current project.\r\n\r\nI am doing a small application for a non-profit group, more as a learning experience for my professional work. I am a .Net developer, but never really made use of any Design Patterns. I basically hand crafted my work. My goal is to see if I can improve my project with ER and MVC.. but also, to learn.\r\n\r\nMy current application has an established SQL Server database hosted on a popular hosting server. I have a WinForms application (C#, .Net 3.5) which is installed onto numerous user-desktops. They then contact a classic ASP.Net WebService (never used WCF..) hosted on the hosting company\u0027s server, which in turn, connects to my SQL Server database.\r\n\r\nI have a ClassLib project which is shared between the WinForms app, and then WebService, which contains the definition of a \u0027CommRequest\u0027 objects. The object has a few properties, as well as a \u0027RequestParameters List\u003cString\u003e\u0027 and a \u0027ReplyParameters List\u003cString\u003e. The WinForms app populates the properties, as well as maybe adds a few parameters to the List\u003c\u003e. I then have one method in my WebService, called \u0027Request\u0027. It accepts a CommRequest object, and then returns the same object, once the operation on the server is complete.\r\n\r\nOn the web service, I have a Database class, which handles database connections and executes stored procs. I then have a DataAccessor for each of the database entities. Within the web service, there is also a EntityObject for each database table. This is all generated using MyGeneration. So I make a table change, and then regenerate the DAL.\r\n\r\nSo, lets say the application makes a request to see if it\u0027s the latest version. I build a CommRequest, and pass it to the WebService... The Request method accepts it, works out what the reuqest is for, and then calls a Service Layer method ... Maybe \u0027FirmwareService.CheckLatestVersion()\u0027. That then calles the DataAccessor... which calls a stored proc... and then the data goes back up to the service layer, which rebuilds the CommRequest.ReplyParameters and then returns the object to the WinForms app.\r\n\r\nAs far as I know, I am using no Patterns here... \r\n\r\nI find it easy to maintain.. easy to debug.. and I have followed a KISS principle. However... maybe something like Entity Framework within the Web Service would make life easier, and use more industry friendly Patterns?\r\n\r\nBasically, I am looking for someone/people to help me work out where my current design falls short, and maybe guide me in using a better Framework or Design Pattern for my application.\r\n\r\nI also have a Web Page that makes use of the Web Service and that is starting to get new features. So, I\u0027m trying to ensure I am sharing code well, and following a nice neat OO design.\r\n\r\nI have attached some example code of my generated DAL stuff.\r\n\r\n\r\n\r\n\r\nAll Data Accessors make use of this single method for Database calls: \r\n\r\n public SqlDataReader ExecuteStoredProcedure(SqlCommand cmd) \r\n        { \r\n            if (_conn.State \u003d\u003d ConnectionState.Closed) \r\n                    _conn.Open(); \r\n            cmd.Connection \u003d _conn; \r\n\r\n            try\r\n            { \r\n                SqlDataReader dr \u003d cmd.ExecuteReader(CommandBehavior.CloseConnection); \r\n\r\n                if (dr !\u003d null) \r\n                    if (dr.HasRows) \r\n                    { \r\n                        return dr; \r\n                    } \r\n            } \r\n            catch (Exception e) \r\n            { \r\n\r\n                LoggingService.WriteDebugLog(\u0027DB Error: \u0027 + e.Message); \r\n                LoggingService.WriteDebugLog(\u0027Procedure call was: \u0027 + cmd.CommandText); \r\n                foreach (SqlParameter sqlParameter in cmd.Parameters) \r\n                { \r\n                    LoggingService.WriteDebugLog(string.Format(\u0027 - Parameter name \u003d [{0}], value \u003d [{1}]\u0027, sqlParameter.ParameterName, sqlParameter.Value)); \r\n                } \r\n                throw; \r\n            } \r\n             \r\n\r\n            return null; \r\n        } \r\n\r\n\r\nAnd this is an example of a Data Accessor call, in which we are requesting a DeviceObject to be returned, based on the PK: \r\n\r\npublic static DeviceObject Get(int deviceId) \r\n{ \r\n        // Create the Database object, using default database (defined in config file).\r\n        Database db \u003d new Database(); \r\n\r\n        const string sqlCommand \u003d \u0027up_device_SelectBy_PK_device_id\u0027; \r\n        SqlCommand cmd \u003d new SqlCommand(sqlCommand); \r\n        cmd.CommandType \u003d CommandType.StoredProcedure; \r\n\r\n        // Add parameters to the parameter cache.\r\n        cmd.Parameters.Add(new SqlParameter(\u0027@device_id\u0027, deviceId)); \r\n        DeviceObject deviceObject \u003d null; \r\n\r\n        using (SqlDataReader dataReader \u003d db.ExecuteStoredProcedure(cmd)) \r\n        { \r\n                if (dataReader.Read()) \r\n                { \r\n                        deviceObject \u003d ReadResult(dataReader); \r\n                } \r\n        } \r\n        return deviceObject; \r\n } \r\n\r\n\r\n\r\nRead Result is a generic method used to read in the fields from the table, in to the objects properties: \r\n\r\n/// \u003csummary\u003e/// Returns an instance of type deviceObject read from a reader./// \u003c/summary\u003e\r\nprivate static DeviceObject ReadResult(IDataReader dataReader) \r\n{ \r\n        DeviceObject deviceObject \u003d new DeviceObject(); \r\n        deviceObject.DeviceId \u003d DbFunctions.GetInt32(dataReader[\u0027device_id\u0027]); \r\n        deviceObject.DeviceTypeId \u003d DbFunctions.GetInt32(dataReader[\u0027device_type_id\u0027]); \r\n        deviceObject.DeviceUid \u003d DbFunctions.GetString(dataReader[\u0027device_uid\u0027]); \r\n        deviceObject.DateRegistered \u003d DbFunctions.GetDateTime(dataReader[\u0027date_registered\u0027]); \r\n        deviceObject.Deleted \u003d DbFunctions.GetNullableDateTime(dataReader[\u0027deleted\u0027]); \r\n \r\n        return deviceObject; \r\n} \r\n\r\n ",
  "answers": [
    {
      "ansID": 1402,
      "ans": "You might want to take a look at my code generator.  It creates n-Tier code based on your designs, but it does come with out-of-the-box code to generate standard n-Tier frameworks, or frameworks based on the Patterns In Action framework.\r\n\r\nBut this code generator generates an infrastructure that is scalable and easy to maintain, and you can create your own framework for future applications that you build.  So it could be a good place to start if you want some examples on how to build a good n-Tier framework.\r\n\r\nDid I mention it\u0027s free and you have access to all the source code?  It uses the MyGenerationSoftware code generation tool for generating the code (which is also free).\r\n\r\nHere are some videos so you can see what it is and what it does.\r\n\r\n\r\nCreate an MVC app - http://www.screencast.com/t/YjBlNzY2NDg - 19 minutes\r\nCreate a PIA web forms app - http://www.screencast.com/t/ZTRmOTBjYTY - 41 minutes\r\nCode explanation - http://www.screencast.com/t/OWMzZTU5ND - 23 minutesIf you want a copy of the code generator, send me an email: info@mvccentral.net.  This version of the code generator contains code based on the DoFactory Patterns In Action framework and I\u0027m only making it available to DoFactory members.  So send me your DoFactory user name so I can confirm you.\r\n\r\nThanks,\r\n\r\nKing Wilder"
    }
  ]
}