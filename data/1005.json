{
  "id": 1005,
  "url": "www.dofactory.com/topic/1005/asp-net-mvc-project-structure.aspx",
  "title": "ASP.NET MVC project structure",
  "ques": "My team is migrating over from ASP.NET WebForms to ASP.NET MVC.  Our Visual Studio solution would exist of the following projects: \r\n\r\n\r\nASP.NET Web App\r\nService Layer\r\nBusiness Layer\r\nData Layer\r\nUtilities It is important to note that our App exposes a public API (represented by the Service Layer).\r\n\r\n--\r\n\r\nNow, with ASP.NET MVC it seems that everything goes, by default, into a single solution, with Model, View, and Controller subfolders.\r\nHowever, we are considering separating the original layers like we did before. \r\n\r\nLike so: \r\n\r\n\r\nASP.NET MVC App (with Controller and Views)\r\nService Layer\r\nBusiness Layer\r\nData Layer\r\nUtilitiesEssentially we are taking the Model out of the MVC App and separating it into Service, Business, and Data Layer.\r\nAs mentioned we are relatively new to ASP.NET MVC, so we would like to hear if anyone used a similar approach, or have better suggestions?\r\n\r\n\r\n",
  "answers": [
    {
      "ansID": 1014,
      "ans": "\r\nI found the M in the MVC slightly confusing at first. The layers I have chosen are similar to yours, as I wanted the Service Layer on top of the Data and Business Layer.\r\n\r\n\r\nMy initial ideas (prompted by some examples from the books on MVC) made me place the model classes (domain/business) into the Models sub-folder of the ASP.NET MVC project.\r\nOf course, it is possible (as I have seen it was encouraged for the sake of simplicity) to ignore the Models folder and make a dependency on the layers on the lower levels, e.g., Service.\r\n\r\n\r\nAt the moment my Models folder is used for keeping objects that are closely related to the presentation layer, such as forms, UI flow-specific objects, and data transfer objects crafted for browser display purposes, etc.).\r\n\r\n\r\nI did it because in my past projects when I was trying to decouple the service layer from the presentation layer, I found that services \u0027knew too much\u0027 about the flow, hence the need for something in between.\r\nI know that some people might frown upon yet another layer between the UI and the business logic layer (or services layer, in the matter of fact), but that is what I have found useful so far.\r\n\r\n\r\nSo in my case the Models folder serves a purpose of separating the UI-specific stuff (such as forms, their temporary data, states, flow logic, etc.) from the service layer.\r\nI would not keep Data Layer or reusable services in Models, in my case that would go outside ASP.NET MVC project to something like Integration layer that serves a purpose of mediating between clients (UI is just one of them) and the Service and Business Layers.\r\n\r\n\r\nThe increased number of layers makes the system more flexible and easier to evolve and maintain in the long term.\r\n\r\n\r\n\r\n"
    }
  ]
}