{
  "id": 1194,
  "url": "www.dofactory.com/topic/1194/service-facade-definition.aspx",
  "title": "Service Facade Definition",
  "ques": "Patterns in Action 4.0 describes the Service Facade as \u0027being grouped by functionality\u0027, and one possible implemenation using the sample application would be to have a Membership Facade, Employee Facade, Reporting Facade, etc., and to \u0027organize these Facades so they match \u0027Vertical Tiers\u0027...\u0027, but \u0027to keep things simple\u0027 the sample application uses only one Facade.\r\n\r\nIn the application our team is building we are grouping the application facades by functionality, but are encoutering an issue with request validation. Specifically, how would the _username private field value get set in a Service Facade that does not contain a Login method? Or, do all Service Facades require a Login in method? If so, that begs the question what am I logging into a Service or an Application? It\u0027s not clear to me what a \u0027Vertical Tier\u0027 represents. \r\n\r\nIf the sample application were broken out into multiple Service Facades how would each Service validate the request and more specifically the _username? The user logging into the application happens once so how would the multiple service facades be aware of the authenticated user?\r\n\r\nAny insight and guidance is appreciated.",
  "answers": [
    {
      "ansID": 1298,
      "ans": "From your description, I don\u0027t think the issue is breaking the Service class up in mulitple \u0027Vertical Tier\u0027 classes, like, MembershipService, CustomerService, ShoppingService, etc.  Rather, what you are asking is: How do we know who is calling the particular method and is he/she authenticated and authorized?   And if the user is authenticated give me UserId, UserName, etc.\r\n\r\nThis can be a fairly complex area. There are numerous ways to deal with this, but it is easiest if you are using Microsoft Membership (for the sake of this discussion I assume you are dealing with a simple 3 tier app, running all tiers on the same machine). Membership provides the necessary information whether he/she is authenticated and authorized (its role). In addition Membership lets you find out who the currently logged in user is by looking at the thread: \r\n\r\n\r\nThread.CurrentPrincipal.Identity.Name\r\nIf you maintain your own User table (in addition to the Membership User or User Profile), you can \r\n\r\n1)  retrieve User information from your database for each call (but this may be expensive)\r\n2)  maintain a list of Users in Cache (which is what we use on DoFactory)\r\n3)  maintain logged-in User information in Session.\r\n\r\nAnother area to explore is TLS (Thread Local Storage) which allows you to store custom data that is local to each thread.\r\n\r\nIf you have a distributed application, with public WebServices, then storing the user in Session may be a reasonable approach.\r\nIf you have multiple load-balanced servers then some sort of authentication token may be your best bet.\r\n\r\nAgain, this can be a fairly complex topic (depending on your requirements and configuration), but I hope this gets you going. \r\n "
    },
    {
      "ansID": 1299,
      "ans": "Thanks for your response. Your suggestions serve as a good starting point. \r\n\r\nYes, we are storing the authenticated User in Session so after authentication completes I know who the User is. In the sample application, the ActionService is the Service authenticating the User, and then subsequently setting _username which later may get validated when other ActionService methods are called (snippet from ActionService): \r\n\r\npublic LoginResponse Login(LoginRequest request)\r\n{ \r\n  // ... \r\n\r\n  if (!Membership.ValidateUser(request.UserName, request.Password))\r\n  { \r\n     response.Acknowledge \u003d AcknowledgeType.Failure;\r\n     response.Message \u003d  \u0027Invalid username and/or password. \u0027;\r\n     return response;\r\n  }\r\n\r\n  _userName \u003d request.UserName; \r\n  \r\n  // ... \r\n}\r\n\r\n\r\nprivate bool ValidRequest(RequestBase request, ResponseBase response, Validate validate)\r\n{ \r\n   //...\r\n\r\n   // Validate user credentials\r\n   if ((Validate.UserCredentials \u0026 validate) \u003d\u003d Validate.UserCredentials)\r\n   {\r\n      if (_userName \u003d\u003d null)\r\n      {\r\n          response.Acknowledge \u003d AcknowledgeType.Failure;\r\n          response.Message \u003d  \u0027Please login and provide user credentials. \u0027;                     \r\n          return false;\r\n      }\r\n   } \r\n   // ...\r\n}\r\nNow I know who the Authenticated user is. If the Validate token is set to confirm user credentials for other methods on the service the service is aware if _userName has been set or not.\r\nLet\u0027s continue with the example assuming there are other services. For example let\u0027s say there is an InventoryService exposing Product based methods and is referenced by the same MVC project, and the authenticated user, now via the UI, calls methods on the InventoryService. If the Validate token is set to confirm user credentials it will fail in the InventoryService because _userName is null. With the Service Facade pattern for applications with multiple services how would the authenticated user information now stored in session get passed to the other services? Or, does each service require a login authentication method?\r\nIf possible, can you please extend the sample application used in the documentation with a small snippet of code showing how the _userName value would get set in another service, for example the InventoryService or the CustomerService. \r\nI appreciate your insight.\r\n\r\n\r\n\r\n\r\n\r\n "
    },
    {
      "ansID": 1301,
      "ans": "In Patterns in Action, if you were to break up the Service in multiple Services and store _userName in Session if would work because WCF is configured to maintain Session for each user by this line: \r\n\r\n\r\n[ServiceBehavior(InstanceContextMode \u003d InstanceContextMode.PerSession)]\r\npublic class ActionService : IActionService\r\n{\r\n   // ...\r\n}\r\n\r\n "
    }
  ]
}