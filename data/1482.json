{
  "id": 1482,
  "url": "www.dofactory.com/topic/1482/need-working-code-abstract-factory-pattern-and-factory-pattern-with-generics.aspx",
  "title": "Need working code for Abstract Factory and Factory Method Pattern with generics",
  "ques": "Hi All,\r\n\r\nI would like to get both Abstract Factory and Factory Method patterns written with generics. \r\nI look forward to some wonderful \u0027code blocks\u0027.\r\n\r\nThanks",
  "answers": [
    {
      "ansID": 1656,
      "ans": "I have implemented both patterns with generics, based on the examples provided on the dofactory site (structural example for Abstract Factory and real-world example for Factory Method).\r\n\r\nAbstract Factory:\r\n\r\n    public class ConcreteFactory\u003cAClass, BClass\u003e : AbstractFactory\r\n        where AClass : AbstractProductA, new()\r\n        where BClass : AbstractProductB, new()\r\n    {\r\n        public override AbstractProductA CreateProductA()\r\n        {\r\n            return new AClass();\r\n        }\r\n\r\n        public override AbstractProductB CreateProductB()\r\n        {\r\n            return new BClass();\r\n        }\r\n    }\r\n\r\n    public class ConcreteFactory1 : ConcreteFactory\u003cProductA1, ProductB1\u003e\r\n    { }\r\n\r\n    public class ConcreteFactory2 : ConcreteFactory\u003cProductA2, ProductB2\u003e\r\n    { }\r\n\r\nFactory Method:\r\n\r\npublic class ConcreteDocument\u003cTClass, UClass, VClass\u003e : Document\r\n        where TClass : Page, new()\r\n        where UClass : Page, new()\r\n        where VClass : Page, new()\r\n    {\r\n        public override void CreatePages()\r\n        {\r\n            Pages.Add(new TClass());\r\n            Pages.Add(new UClass());\r\n            Pages.Add(new VClass());\r\n        }\r\n    }\r\n\r\n    public class ConcreteDocument\u003cTClass, UClass, VClass, WClass, XClass\u003e : Document\r\n        where TClass : Page, new()\r\n        where UClass : Page, new()\r\n        where VClass : Page, new()\r\n        where WClass : Page, new()\r\n        where XClass : Page, new()\r\n    {\r\n        public override void CreatePages()\r\n        {\r\n            Pages.Add(new TClass());\r\n            Pages.Add(new UClass());\r\n            Pages.Add(new VClass());\r\n            Pages.Add(new WClass());\r\n            Pages.Add(new XClass());\r\n        }\r\n    }\r\n\r\n    public class Resume : ConcreteDocument\u003cSkillsPage, EducationPage, ExperiencePage\u003e { }\r\n\r\n    public class Report : ConcreteDocument\u003cIntroductionPage, ResultsPage, ConclusionPage,\r\n                                SummaryPage, BibliographyPage\u003e { }\r\nEven though both are possible, I don\u0027t think the Factory Method implementation is any better using the generics the way I\u0027ve done it. (And I can\u0027t seem to find any better solution).\r\n\r\nThe Abstract Factory surely gains from the generics, because the implementation is reusable in all cases.\r\n\r\nIf these code blocks look like the gofactory .NET Optimized versions, it is without intent because I haven\u0027t yet had the chance to look at those.\r\n\r\nHopefully this is what you were looking for."
    }
  ]
}