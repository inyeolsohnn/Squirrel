{
  "id": 1519,
  "url": "www.dofactory.com/topic/1519/what-pattern-to-use.aspx",
  "title": "What pattern to use?",
  "ques": "Hi,\r\n\r\nI\u0027m totally new in patterns. I\u0027ve read a lot about creational patterns and I think I\u0027ve understud them theoretically. But I have problems, to choose the right pattern in real live.\r\nMy actual problem: I have a simple telephony application. In this application I have to deal with several phone interfaces. What I want to have is an object that tells me what interfaces are available to let the user choose one of them in a combobox. Then I only want to change the object to work with. E.g. depending on the selected interface the MakeCall method calls a method in an external dll, creates a textfile or writes the number to the registry or sometihing else.\r\nBut what is the best pattern to do this? Factory, abstract factory or builder pattern? Or something total different?\r\nI hope you can help me to learn how to choose the right pattern.\r\n\r\nThanks a lot\r\n\r\nMarkus",
  "answers": [
    {
      "ansID": 1707,
      "ans": "Hi,\r\n\r\nYou have Family of products here, so factory pattern would be helpful. \r\n\r\nPlease refer to the code sample have put in here, you could think of having list of hard-coded strings but enums provide better control over the code, especially when you distribute it across developers and avoid case-sensitivity issues.\r\n\r\nPlease walk through the code, try and let me know your thoughts.\r\n\r\n- Tarriq Ferrose Khan\r\n\r\n//ENUMERATOR FOR EACH CUSTOM TELEPHONY TYPE\r\n\r\npublic enum TelephonyInterfaceType {TelephonyInterface1,TelephonyInterface2,TelephonyInterface3 }\r\n\r\n// COMMON METHODS TO GET LIST OF ENUMS AND RETURN ENUM BASED ON STRING RETURNED FROM \r\n//DROPDOWN LIST\r\npublic Array GetListOfTelephonyInterfaceTypes()\r\n        {\r\n            \r\n            Array lstProvider \u003d System.Enum.GetValues(typeof(TelephonyInterfaceType));\r\n                        return lstProvider ;\r\n           //Use this Array to populate your dropdown list.\r\n        }\r\n\r\n\r\nprivate TelephonyInterfaceType GetTelephonyInterfaceType(string strFilterType)\r\n        {\r\n//send in the selected text from the dropdown to this method which will return the correct enum\r\n// of the selected telephony interface\r\n            TelephonyInterfaceType filterType \u003d new TelephonyInterfaceType();\r\n            Array lstProvider \u003d System.Enum.GetValues(typeof(TelephonyInterfaceType));\r\n            foreach (TelephonyInterfaceType enumFilterType in lstProvider)\r\n            {\r\n                if (enumFilterType.ToString().ToUpper() \u003d\u003d strFilterType.ToUpper())\r\n                {\r\n                    filterType \u003d enumFilterType;break;\r\n                }\r\n            }\r\n            return filterType;\r\n        }\r\n\r\n\r\n//COMMON INTERFACE ACROSS CUSTOM TELEPHONY CLIENTS.\r\n\r\npublic Interface ICustomTelephony\r\n{\r\n  void MakeCall();\r\n}\r\n\r\n//EACH CLIENT CLASS \r\npublic class TelephonyClient1:ICustomTelephony\r\n{\r\n   public void MakeCall()\r\n   {\r\n    // Provide your custom implementation here...\r\n   }\r\n}\r\n\r\npublic class TelephonyClient2:ICustomTelephony\r\n{\r\n   public void MakeCall()\r\n   {\r\n    // Provide your custom implementation here...\r\n   }\r\n}\r\n\r\n\r\npublic class TelephonyClient3:ICustomTelephony\r\n{\r\n   public void MakeCall()\r\n   {\r\n    // Provide your custom implementation here...\r\n   }\r\n}\r\n\r\n\r\n//FACTORY\r\n\r\npublic class TelephoneFactory()\r\n{\r\n  public TelephoneFactory()\r\n  {\r\n  }\r\n\r\n  public void MakeCall(string interfaceType )\r\n  {\r\n    //interfaceType should be the selected text from your Dropdown list box\r\n    TelephonyInterfaceType interfaceType \u003d GetTelephonyInterfaceType(interfaceType)\r\n    ICustomTelephony iTelephony;\r\n    switch(interfaceType)\r\n    {\r\n      case TelephonyInterfaceType.TelephonyInterface1:\r\n       iTelephony\u003d new TelephonyClient1();\r\n      break;\r\n      case TelephonyInterfaceType.TelephonyInterface2:\r\n      iTelephony\u003d new TelephonyClient2();\r\n      break;\r\n      case TelephonyInterfaceType.TelephonyInterface3: \r\n      iTelephony\u003d new TelephonyClient3();\r\n      break;\r\n     }\r\n     iTelephony.MakeCall();\r\n  }\r\n\r\n}\r\n\r\n// MAKE CALL \r\n\r\npublic class ClientTelehphony()\r\n{\r\n\r\n  private void BindDropdown()\r\n  {\r\n   //call GetListOfTelephonyInterfaceTypes method and populate the dropdown\r\n  }\r\n\r\n  //on selected index changed or event of your choice call below method\r\n\r\n  public void MakeCall()\r\n  {\r\n    TelephoneFactory factory \u003d new TelephoneFactory();\r\n    factory.MakeCall(DropdownList1.SelectedText);\r\n   //MakeCall() method of your relevant Client Telephony Class will be called, based on your dropdown selection.\r\n   \r\n  }\r\n\r\n}\r\n\r\n "
    },
    {
      "ansID": 1710,
      "ans": "Hi,\r\n\r\nthank you very much for your answer and your very good example code.\r\nBecause the telephone interface would not change very often (in best case it is set only once at the first call of the telephony application) I\u0027m thinking about the following two things:\r\n- Wouldn\u0027t it be good to set the used telephone interface in the factory class by a property in which the specific telephone object (iTelephony) of type ICustomTelephony is set? So I don\u0027t have to create a specific object in every method by select-case.\r\n- Would it be a good way to get the specific telephone object (iTelephony) of type ICustomTelephony by a Methode of the factory class with a parameter whick specifies the used telephone interface? So I could directly call methods on this object (e.g. MakeCall) and don\u0027t have to implement this method again in the factory class? Would this way of implementation still be the factory pattern?\r\nLots of thoughts ;-) This is what i meant with heaving difficulties in applying theory to my actual problem."
    },
    {
      "ansID": 1711,
      "ans": "1)- Wouldn\u0027t it be good to set the used telephone interface in the factory class by a property in which the specific telephone object (iTelephony) of type ICustomTelephony is set? So I don\u0027t have to create a specific object in every method by select-case.\r\n2- Would it be a good way to get the specific telephone object (iTelephony) of type ICustomTelephony by a Methode of the factory class with a parameter whick specifies the used telephone interface? So I could directly call methods on this object (e.g. MakeCall) and don\u0027t have to implement this method again in the factory class? Would this way of implementation still be the factory pattern?\r\nAns for 2: ---- in my code sample just to make it simple for understanding have enclosed returning the class and making call in same method. Ideally you need to have a method like GetTelephoneProduct(\u003crequiredParameter), which will return instance of the correct Telehpony class.\r\nThen in the client class you can just do returnedobject.MakeCall()... which will be still Factory Pattern..\r\nAns for 1: If you have done per ans for 2, then you do not need the select case for every method..\r\nPlease find the modified code sample, for your reference,\r\nIn case if you want to have some other method, expose the same in the Interface and provide implementation in each individual classes\r\nHope this helps.\r\n\r\n--Tarriq Ferrose Khan\r\n\r\n\r\n//ENUMERATOR FOR EACH CUSTOM TELEPHONY TYPE\r\n\r\npublic enum TelephonyInterfaceType {TelephonyInterface1,TelephonyInterface2,TelephonyInterface3 }\r\n\r\n// COMMON METHODS TO GET LIST OF ENUMS AND RETURN ENUM BASED ON STRING RETURNED FROM \r\n//DROPDOWN LIST\r\npublic Array GetListOfTelephonyInterfaceTypes()\r\n        {\r\n            \r\n            Array lstProvider \u003d System.Enum.GetValues(typeof(TelephonyInterfaceType));\r\n                        return lstProvider ;\r\n           //Use this Array to populate your dropdown list.\r\n        }\r\n\r\n\r\nprivate TelephonyInterfaceType GetTelephonyInterfaceType(string strFilterType)\r\n        {\r\n//send in the selected text from the dropdown to this method which will return the correct enum\r\n// of the selected telephony interface\r\n            TelephonyInterfaceType filterType \u003d new TelephonyInterfaceType();\r\n            Array lstProvider \u003d System.Enum.GetValues(typeof(TelephonyInterfaceType));\r\n            foreach (TelephonyInterfaceType enumFilterType in lstProvider)\r\n            {\r\n                if (enumFilterType.ToString().ToUpper() \u003d\u003d strFilterType.ToUpper())\r\n                {\r\n                    filterType \u003d enumFilterType;break;\r\n                }\r\n            }\r\n            return filterType;\r\n        }\r\n\r\n\r\n//COMMON INTERFACE ACROSS CUSTOM TELEPHONY CLIENTS.\r\n\r\npublic interface ICustomTelephony\r\n{\r\n  void MakeCall();\r\n}\r\n\r\n//EACH CLIENT CLASS \r\npublic class TelephonyClient1:ICustomTelephony\r\n{\r\n   public void MakeCall()\r\n   {\r\n    // Provide your custom implementation here...\r\n   }\r\n}\r\n\r\npublic class TelephonyClient2:ICustomTelephony\r\n{\r\n   public void MakeCall()\r\n   {\r\n    // Provide your custom implementation here...\r\n   }\r\n}\r\n\r\n\r\npublic class TelephonyClient3:ICustomTelephony\r\n{\r\n   public void MakeCall()\r\n   {\r\n    // Provide your custom implementation here...\r\n   }\r\n}\r\n\r\n\r\n\r\n//FACTORY\r\n\r\npublic class TelephoneFactory\r\n{\r\n  public TelephoneFactory()\r\n  {\r\n  }\r\n\r\n  public ICustomTelephony GetTelephonyProduct(string strInterfaceType )\r\n  {\r\n    //interfaceType should be the selected text from your Dropdown list box\r\n    TelephonyInterfaceType interfaceType \u003d GetTelephonyInterfaceType(strInterfaceType)\r\n    ICustomTelephony iTelephony;\r\n    switch(interfaceType)\r\n    {\r\n      case TelephonyInterfaceType.TelephonyInterface1:\r\n       iTelephony\u003d new TelephonyClient1();\r\n      break;\r\n      case TelephonyInterfaceType.TelephonyInterface2:\r\n      iTelephony\u003d new TelephonyClient2();\r\n      break;\r\n      case TelephonyInterfaceType.TelephonyInterface3: \r\n      iTelephony\u003d new TelephonyClient3();\r\n      break;\r\n     }\r\n     return iTelephony;\r\n  }\r\n\r\n}\r\n\r\n// MAKE CALL \r\n\r\npublic class ClientTelehphony\r\n{\r\n  ICustomTelephony iCustomTelephony;\r\n  public ClientTelehphony()\r\n  {\r\n  }\r\n\r\n  \r\n  private void BindDropdown()\r\n  {\r\n   //call GetListOfTelephonyInterfaceTypes method and populate the dropdown\r\n  }\r\n\r\n  //on selected index changed of the DropdownList1 call below method\r\n\r\n  public void SetTelephonyInterface()\r\n  {  \r\n   //call this method in Page_load or any initialization routine as well\r\n  //, in case if you don ot   //have a default option\r\n  //like --select-- in the dropdownlist, the Telephony product will be returned for the 1st \r\n  //item in the Dropdown list, that way iCustomTelephony will never be null.\r\n  //The reason we have this in a method is to re-use the Initialization part when the \r\n  // user changes the Dropdown.\r\n   if(DropdownList1.SelectedText\u003d\u003dnull) return;\r\n   TelephoneFactory factory \u003d new TelephoneFactory(); \r\n   iCustomTelephony\u003d factory.GetTelephonyProduct(DropdownList1.SelectedText); \r\n  } \r\n\r\n\r\n  public void MakeCall()\r\n  {\r\n   if(iCustomTelephony!\u003dnull)\r\n      iCustomTelephony.MakeCall();   \r\n  }\r\n\r\n}\r\n\r\n "
    }
  ]
}