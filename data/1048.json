{
  "id": 1048,
  "url": "www.dofactory.com/topic/1048/linq-to-sql-and-stored-procedure.aspx",
  "title": "LINQ-to-SQL and Stored Procedures",
  "ques": "I have a side project where most of the operations will be simple data retrievals (the data is automatically inserted at regular intervals through another process -- i.e. a scheduled task).  The application will be used as an ad-hoc reporting / querying tool.  There will be minimal joins, so the SQL statements are all pretty simple.  It is important that the operations work fast and efficient.\r\nMy client is suggesting we use LINQ-to-SQL combined with stored procedures. My question is this: if we decide to use stored procedures, is LINQ-to-SQL the right tool?  Or, would it be better to use classic ADO.NET?  Are there any advantages to using LINQ-to-SQL over ADO.NET?  How about performance, ease-of-use, etc?  Thanks in advance.\r\n",
  "answers": [
    {
      "ansID": 1081,
      "ans": "Some advantages of LINQ over sprocs:\r\n\r\nType safety: I think we all understand this. \r\nAbstraction: This is especially true with LINQ-to-Entities. This abstraction also allows the framework to add additional improvements that you can easily take advantage of. PLINQ is an example of adding multi-threading support to LINQ. Code changes are minimal to add this support. It would be MUCH harder to do this data access code that simply calls sprocs. \r\nDebugging support: I can use any .NET debugger to debug the queries. With sprocs, you cannot easily debug the SQL and that experience is largely tied to your database vendor (MS SQL Server provides a query analyzer, but often that isn\u0027t enough). \r\nVendor agnostic: LINQ works with lots of databases and the number of supported databases will only increase. Sprocs are not always portable between databases, either because of varying syntax or feature support (if the database supports sprocs at all). \r\nDeployment: Others have mentioned this already, but it\u0027s easier to deploy a single assembly than to deploy a set of sprocs. This also ties in with #4. \r\nEasier: You don\u0027t have to learn T-SQL to do data access, nor do you have to learn the data access API (e.g. ADO.NET) necessary for calling the sprocs. This is related to #3 and #4. \r\nSome disadvantages of LINQ vs sprocs:\r\n\r\nNetwork traffic: sprocs need only serialize sproc-name and argument data over the wire while LINQ sends the entire query. This can get really bad if the queries are very complex. However, LINQ\u0027s abstraction allows Microsoft to improve this over time. \r\nLess flexible: Sprocs can take full advantage of a database\u0027s featureset. LINQ tends to be more generic in it\u0027s support. This is common in any kind of language abstraction (e.g. C# vs assembler). \r\nRecompiling: If you need to make changes to the way you do data access, you need to recompile, version, and redeploy your assembly. Sprocs can sometimes allow a DBA to tune the data access routine without a need to redeploy anything. \r\nSecurity and manageability are something that people argue about too.\r\n\r\nSecurity: For example, you can protect your sensitive data by restricting access to the tables directly, and put ACLs on the sprocs. With LINQ, however, you can still restrict direct access to tables and instead put ACLs on updatable table views to achieve a similar end (assuming your database supports updatable views). \r\nManageability: Using views also gives you the advantage of shielding your application non-breaking from schema changes (like table normalization). You can update the view without requiring your data access code to change.  Keeping this in view. you can decide accordingly."
    }
  ]
}