{
  "id": 1500,
  "url": "www.dofactory.com/topic/1500/data-transfer-objects-using-ado-net-ef.aspx",
  "title": "Data Transfer Objects using ADO.NET EF",
  "ques": "All,\r\n\r\nI\u0027m new to creating n-Layered Applications and I\u0027d like some insight.\r\n\r\nI\u0027m creating my first n-Layered Application and have a  I have a PL, BLL, Service Layer (for responding to UI calls from flash and web components), and a DAL. I created these as separate projects so they would compile with their own DLL.  However I found myself running into a circular reference  problem because my SL had to have a reference to my BLL (to be aware of my Business Objects) and my BLL had to Reference my SL because at the time I didn\u0027t allow my PL to access my SL directly.  Since then I moved my SL Logic into my BLL as separate class files (to be Business Object aware) .\r\n\r\nSo my questions are:  \r\nIs it good practice to move my SL to BLL?\r\nWhat pattern should I employ to rid my self of circular references?\r\n\r\nFinally,\r\nI read about the Data Transfer Object Pattern(Value Object Pattern) and even though DoFactory employs this pattern in the \u0027Patterns in Actions\u0027 Solution I cannot find where they explain it w/in the documentation (unless it\u0027s called something else) so I\u0027ve been setting breakpoints to get the pattern flow.",
  "answers": [
    {
      "ansID": 1686,
      "ans": "Hi ,\r\n\r\n-----SEPARATION OF CONCERNS is the issue----------\r\n\r\nMore then any pattern you need to concentrate on one of the Key Architectural aspect  \u0027Separation of Concerns \u0027.\r\nFrom your problem statement it is vivid that the few features your SL needs is coded in BL and the few features required for BL is coded in SL, thats why you ended up in referencing each other.\r\n\r\nPer this architecture standard  \u0027All the functionalities that you need in BL should be encapsulated within BL. \u0027 \r\n\r\nIn N-tier architecture SL is normally introduced to act as a mediator, that it totally abstracts away the dependency of PL on BL.\r\nSo that it introduces architectural stability/scalablity/flexibility etc., that any change to BL does not impact PL.\r\n\r\nAlso your BL mostly needs to be behind FireWall (FW) for security reasons.\r\nProposed Solution:\r\n\r\nAt this point if you need to encapsulate functionalities in web service and re-use across menthods in your BL ?\r\nThen to resolve your issue you need to classify the web services on you service layer into two: \r\n\r\n1-\u003e PSL - Presentation Service Layer - the one which PL will have touch points to interact with BL back and forth.\r\n2-\u003e BSL - Business Service Layer - Accessible only for BL and not to out side world.\r\n\r\nIn your case the sequence could be like : \r\n\r\nUser-\u003e PL -\u003e \u003coverweb access\u003e PSL---|FW|---\u003eB(S)L---\u003eDAL----\u003eDB \r\nHope this helps\r\n\r\n- Tarriq Ferrose Khan\r\n\r\n\r\n\r\n"
    }
  ]
}