{
  "id": 1262,
  "url": "www.dofactory.com/topic/1262/wcf-timeout.aspx",
  "title": "WCF Timeout",
  "ques": "Two questions:\r\n\r\nLooking at project \u0027Patterns in Action\u0027 with Windows Forms interface you find two \u0027app.config\u0027 files.One file is in the Windows Forms project and the other file is in the Windows Model project. Why two files?\r\nI have implemented a similar solution to \u0027Patterns in Action\u0027 using Windows Forms as the interface. When I return a response from the service that contains a list\u003cDTO\u003e with around 400 DTO objects I am getting a timeout exception from the service. If however I return a smaller list (say 200 items instead of 400 items) all is working fine. my DTO is pretty small with seven public members (int, int, string, string, string,string, string)\r\nSo far this is what I have done -\r\n\r\nEnsured strings returned from the database are only a one character long each.\r\nChanged all values in \u0027app.config\u0027 to 2147483647. For example I changed maxReceivedMessageSize\u003d\u00272147483647\u0027\r\nChanged all values of readerQuotas to 2147483647\r\nChanged all timeout values to 10 minutes (00:10:00). For example I changed closeTimeout and sendTime in app.config files\r\nAdded sendTimeout \u003d \u002700:10:00\u0027 to my web.config file\r\n\r\nAdded -\r\n      \u003cbehaviors\u003e\r\n        \u003cserviceBehaviors\u003e\r\n          \u003cbehavior name\u003d\u0027behaviorAction\u0027\u003e\r\n            \u003cdataContractSerializer maxItemsInObjectGraph \u003d\u00272147483647\u0027/\u003e\r\n          \u003c/behavior\u003e\r\n        \u003c/serviceBehaviors\u003e\r\n      \u003c/behaviors\u003e\r\n\r\nto both \u0027app.config\u0027 files and to my \u0027web.config\u0027 file\r\n\r\nWhatever I do as soon as my list grows beyond 200 items it does not work.\r\nUsing the \u0027Service Trace Viewer\u0027 I have traced my WCF web service but could not find and hints there either.\r\n\r\nAny help appreciated.\r\n\r\n\r\n\r\nMy \u0027Windows Forms Model\u0027 \u0027app.config\u0027 -\r\n   - \r\n\u003c?xml version\u003d\u00271.0\u0027 encoding\u003d\u0027utf-8\u0027 ?\u003e \r\n\u003cconfiguration\u003e \r\n    \u003csystem.serviceModel\u003e \r\n        \u003cbindings\u003e \r\n            \u003cwsHttpBinding\u003e \r\n                \u003cbinding name\u003d\u0027WSHttpBinding_IApplicationService\u0027 closeTimeout\u003d\u002700:10:00\u0027\r\n                    openTimeout\u003d\u002700:10:00\u0027 receiveTimeout\u003d\u002700:10:00\u0027 sendTimeout\u003d\u002700:10:00\u0027\r\n                    bypassProxyOnLocal\u003d\u0027false\u0027 transactionFlow\u003d\u0027false\u0027 hostNameComparisonMode\u003d\u0027StrongWildcard\u0027\r\n                    maxBufferPoolSize\u003d\u00272147483647\u0027 maxReceivedMessageSize\u003d\u00272147483647\u0027\r\n                    messageEncoding\u003d\u0027Text\u0027 textEncoding\u003d\u0027utf-8\u0027 useDefaultWebProxy\u003d\u0027true\u0027\r\n                    allowCookies\u003d\u0027false\u0027\u003e \r\n                    \u003creaderQuotas maxDepth\u003d\u00272147483647\u0027 maxStringContentLength\u003d\u00272147483647\u0027 maxArrayLength\u003d\u00272147483647\u0027\r\n                        maxBytesPerRead\u003d\u00272147483647\u0027 maxNameTableCharCount\u003d\u00272147483647\u0027 /\u003e \r\n                    \u003creliableSession ordered\u003d\u0027true\u0027 inactivityTimeout\u003d\u002700:10:00\u0027\r\n                        enabled\u003d\u0027true\u0027 /\u003e \r\n                    \u003csecurity mode\u003d\u0027Message\u0027\u003e \r\n                        \u003ctransport clientCredentialType\u003d\u0027Windows\u0027 proxyCredentialType\u003d\u0027None\u0027\r\n                            realm\u003d\u0027\u0027 /\u003e \r\n                        \u003cmessage clientCredentialType\u003d\u0027Windows\u0027 negotiateServiceCredential\u003d\u0027true\u0027\r\n                            algorithmSuite\u003d\u0027Default\u0027 establishSecurityContext\u003d\u0027true\u0027 /\u003e \r\n                    \u003c/security\u003e \r\n                \u003c/binding\u003e \r\n            \u003c/wsHttpBinding\u003e \r\n        \u003c/bindings\u003e \r\n        \u003cclient\u003e \r\n            \u003cendpoint address\u003d\u0027http://localhost:1274/ApplicationService.svc\u0027\r\n                binding\u003d\u0027wsHttpBinding\u0027 bindingConfiguration\u003d\u0027WSHttpBinding_IApplicationService\u0027\r\n                contract\u003d\u0027ApplicationService.IApplicationService\u0027 name\u003d\u0027WSHttpBinding_IApplicationService\u0027\u003e \r\n                \u003cidentity\u003e \r\n                    \u003cdns value\u003d\u0027localhost\u0027 /\u003e \r\n                \u003c/identity\u003e \r\n            \u003c/endpoint\u003e \r\n        \u003c/client\u003e \r\n      \u003cbehaviors\u003e \r\n        \u003cserviceBehaviors\u003e \r\n          \u003cbehavior name\u003d\u0027behaviorAction\u0027\u003e \r\n            \u003cdataContractSerializer maxItemsInObjectGraph \u003d\u00272147483647\u0027/\u003e \r\n          \u003c/behavior\u003e \r\n        \u003c/serviceBehaviors\u003e \r\n      \u003c/behaviors\u003e \r\n    \u003c/system.serviceModel\u003e \r\n\u003c/configuration\u003e \r\n \r\n\r\nMy DTO object - \r\n\r\n\r\nusing System; \r\nusing System.Data; \r\nusing System.Configuration; \r\nusing System.Collections.Generic; \r\nusing System.Xml.Serialization; \r\nusing System.Linq; \r\nusing System.Web; \r\nusing System.Xml.Linq; \r\n\r\nusing System.Runtime.Serialization; \r\n\r\nusing BusinessObjects.BusinessRules; \r\n\r\nnamespace ApplicationService.DataTransferObjects \r\n{ \r\n   [DataContract(Name \u003d \u0027Employee\u0027, Namespace \u003d \u0027http://www.yourcompany.com/types/\u0027)] \r\n   public class EmployeeDto \r\n   { \r\n       /// \u003csummary\u003e        \r\n       /// Employee unique identifier.        \r\n       /// \u003c/summary\u003e        \r\n       [DataMember] \r\n       public int Id { get; set; } \r\n       /// \u003csummary\u003e        \r\n       /// Employee payroll number.        \r\n       /// \u003c/summary\u003e        \r\n       [DataMember] \r\n       public int PayrollNumber { get; set; } \r\n       /// \u003csummary\u003e        \r\n       /// Surname.        \r\n       /// \u003c/summary\u003e        \r\n       [DataMember] \r\n       public string Surname { get; set; } \r\n       /// \u003csummary\u003e        \r\n       /// Middle name.        \r\n       /// \u003c/summary\u003e        \r\n       [DataMember] \r\n       public string MiddleName { get; set; } \r\n\r\n       /// \u003csummary\u003e        \r\n       /// Firstname.        \r\n       /// \u003c/summary\u003e        \r\n       [DataMember] \r\n       public string Firstname { get; set; } \r\n\r\n       /// \u003csummary\u003e        \r\n       /// Company name of employee.        \r\n       /// \u003c/summary\u003e        \r\n       [DataMember] \r\n       public string CompanyName { get; set; } \r\n\r\n       /// \u003csummary\u003e        \r\n       /// Gets or sets the version number. Used for optimistic concurrency.        \r\n       /// \u003c/summary\u003e        \r\n       [DataMember] \r\n       public string Version { get; set; } \r\n   } \r\n} \r\n\r\n \r\n\r\nRelevant section from my \u0027web.config\u0027 - \r\n\r\n  \u003csystem.serviceModel\u003e \r\n     \u003cservices\u003e \r\n       \u003cservice behaviorConfiguration\u003d\u0027behaviorAction\u0027 name\u003d\u0027ApplicationService.ServiceImplementations.ApplicationService\u0027\u003e \r\n         \u003cendpoint binding\u003d\u0027wsHttpBinding\u0027 bindingConfiguration\u003d\u0027bindingAction\u0027 contract\u003d\u0027ApplicationService.ServiceContracts.IApplicationService\u0027\u003e \r\n           \u003cidentity\u003e \r\n             \u003cdns value\u003d\u0027localhost\u0027/\u003e \r\n           \u003c/identity\u003e \r\n         \u003c/endpoint\u003e \r\n         \u003cendpoint address\u003d\u0027mex\u0027 binding\u003d\u0027mexHttpBinding\u0027 contract\u003d\u0027IMetadataExchange\u0027/\u003e \r\n       \u003c/service\u003e \r\n     \u003c/services\u003e \r\n     \u003cbehaviors\u003e \r\n       \u003cserviceBehaviors\u003e \r\n         \u003cbehavior name\u003d\u0027behaviorAction\u0027\u003e \r\n           \u003cserviceMetadata httpGetEnabled\u003d\u0027true\u0027/\u003e \r\n           \u003cserviceDebug includeExceptionDetailInFaults\u003d\u0027true\u0027/\u003e \r\n           \u003cdataContractSerializer maxItemsInObjectGraph \u003d\u00272147483647\u0027/\u003e \r\n         \u003c/behavior\u003e \r\n       \u003c/serviceBehaviors\u003e \r\n     \u003c/behaviors\u003e \r\n     \u003cbindings\u003e \r\n       \u003cwsHttpBinding\u003e \r\n         \u003cbinding name\u003d\u0027bindingAction\u0027 transactionFlow\u003d\u0027false\u0027 receiveTimeout\u003d\u002700:30:00\u0027 sendTimeout \u003d\u002700:30:00\u0027\u003e \r\n           \u003creliableSession enabled\u003d\u0027true\u0027/\u003e \r\n         \u003c/binding\u003e \r\n       \u003c/wsHttpBinding\u003e \r\n     \u003c/bindings\u003e \r\n   \u003c/system.serviceModel\u003e \r\n\r\n \r\n\r\nThe code that generates the timeout (the timeout happens on line \u0027return response\u0027 at the end  - \r\n/// \u003csummary\u003e        \r\n/// Request list of employees for a given criteria.        \r\n/// \u003c/summary\u003e        \r\n/// \u003cparam name\u003d\u0027request\u0027\u003eEmployee request message.\u003c/param\u003e        \r\n/// \u003creturns\u003eEmployee response message.\u003c/returns\u003e        \r\npublic EmployeeResponse GetEmployees(EmployeeRequest request) \r\n{ \r\n   EmployeeResponse response \u003d new EmployeeResponse(); \r\n   response.CorrelationId \u003d request.RequestId; \r\n\r\n   // Validate client tag, access token, and user credentials\r\n   if (!ValidRequest(request, response, Validate.All)) \r\n      return response; \r\n   EmployeeCriteria criteria \u003d request.Criteria as EmployeeCriteria; \r\n   if (request.LoadOptions.Contains(\u0027Employees\u0027)) \r\n   { \r\n      IEnumerable\u003cEmployee\u003e employees \u003d employeeTimesheetDao.GetEmployeeList(request.SourceDb, request.SystemDb, criteria.SiteId, criteria.FinYear, false); \r\n      response.Employees \u003d employees.Select(c \u003d\u003e Mapper.ToDataTransferObject(c)).ToList(); \r\n   } \r\n   return response; \r\n} \r\n\r\n ",
  "answers": [
    {
      "ansID": 1363,
      "ans": "I finally solved the second issue the WCF timout.\r\n In my application I have enabled my WCF service via a COM object for legacy applications that need my WCF service.\r\n Trouble is that COM object (being a class library) does not have app.config and so I added code to read a configuration file effectively bypassing my app.config settings. Hence the symptom that whatever I did in the app.config has no effect on the WCF service at all.\r\n\r\n I added in the C# code, assignments for wsHttpBinding settings such as maxBufferPoolSize \u003d 2147483647 and so forth.\r\n Once I have done this my WCF service start working like a charm.\r\n\r\n For those of you who are interested I have included the relevant section of my C# code.\r\n\r\n I still do not know however why there are two app.config files in the Windows Forms project in Patterns in Action.\r\n\r\n\r\n\r\n\r\nExeConfigurationFileMap fileMap \u003d new ExeConfigurationFileMap(); \r\n\r\n            // Force reading configuration from a specific file in-place of the app.config that is usually used.\r\n            fileMap.ExeConfigFilename \u003d @ \u0027C:Program FilesApplication.exe.config \u0027;  \r\n            Configuration config \u003d ConfigurationManager.OpenMappedExeConfiguration(fileMap, ConfigurationUserLevel.None); \r\n\r\n            // Read the endpoint from the configuration file.\r\n            ConfigurationSectionGroup csg \u003d config.GetSectionGroup( \u0027system.serviceModel \u0027); \r\n            ConfigurationSection css \u003d csg.Sections[ \u0027client \u0027]; \r\n            ClientSection cs \u003d (ClientSection)csg.Sections[ \u0027client \u0027]; \r\n            ChannelEndpointElement endPoint \u003d cs.Endpoints[0]; \r\n            string endPointString \u003d endPoint.Address.ToString(); \r\n\r\n            // Use wsHttpBinding.\r\n            WSHttpBinding wsBinding \u003d new WSHttpBinding(); \r\n            // Enable reliable session.\r\n            OptionalReliableSession rl \u003d wsBinding.ReliableSession; \r\n            rl.Enabled \u003d true;             \r\n            EndpointAddress endpointAddress \u003d new EndpointAddress(endPointString); \r\n            // Set values for endpoint. These values are normally set in app.config.\r\n            // Note the max limit 2147483647 or the service will throw errors when sending back to client a large collection.\r\n            TimeSpan ts \u003d new TimeSpan(0, 30, 0); \r\n            wsBinding.ReceiveTimeout \u003d ts; \r\n            wsBinding.MaxBufferPoolSize \u003d 2147483647; \r\n            wsBinding.MaxReceivedMessageSize \u003d 2147483647; \r\n            wsBinding.ReaderQuotas.MaxArrayLength \u003d 2147483647; \r\n            wsBinding.ReaderQuotas.MaxBytesPerRead \u003d 2147483647; \r\n            wsBinding.ReaderQuotas.MaxDepth \u003d 2147483647; \r\n            wsBinding.ReaderQuotas.MaxStringContentLength \u003d 2147483647; \r\n            wsBinding.ReaderQuotas.MaxNameTableCharCount \u003d 2147483647; \r\n\r\n            // Get a new instance of the application service using the settings that were set above.\r\n            Service \u003d new ApplicationServiceClient(wsBinding, endpointAddress); \r\n\r\n "
    }
  ]
}