{
  "id": 1162,
  "url": "www.dofactory.com/topic/1162/paging-support-using-repository-pattern.aspx",
  "title": "Paging Support using Repository Pattern",
  "ques": "I am new to Design Patterns and am working on a project based on the Patterns In Action 4.0 solution.  I am trying to implement paging support in an MVC web application and am having an issue.  The paging library I am using can be found in Stephen Walthers\u0027 MVC Unleashed book.  The library makes use of Linq Extensions to add the paging logic to the Entity framework query.\r\n\r\nThe issue I am having is when the Paging Linq Extension tries to count the number of records.  I get an error message that states \u0027The ObjectContext instance has been disposed and can no longer be used for operations that require a connection\u0027.  I understand that the connection is closed since in the repository class the method utilizes a \u0027using\u0027 statement.  After the query is complete the connection is closed.  What would be the best way to add paging support to the repository pattern?\r\n\r\nThanks\r\n\r\nPaging code below:\r\n\r\n\r\npublic static class PagingLinqExtensions\r\n{\r\n  public static PagedList\u003cT\u003e ToPagedList\u003cT\u003e(this IQueryable\u003cT\u003e allItems, int? pageIndex, int pageSize)\r\n  {\r\n    return ToPagedList\u003cT\u003e(allItems, pageIndex, pageSize, string.Empty);\r\n  }\r\n  public static PagedList\u003cT\u003e ToPagedList\u003cT\u003e(this IQueryable\u003cT\u003e allItems, int? pageIndex, int pageSize, string sort)\r\n  {\r\n    var truePageIndex \u003d pageIndex ?? 0;\r\n    var itemIndex \u003d truePageIndex * pageSize;\r\n    var pageOfItems \u003d allItems.Skip(itemIndex).Take(pageSize);\r\n    var totalItemCount \u003d allItems.Count();\r\n    return new PagedList\u003cT\u003e(pageOfItems, truePageIndex, pageSize, totalItemCount, sort);\r\n  }\r\n}\r\n\r\nRepository code below:\r\n\r\n\r\npublic IQueryable\u003cAsset\u003e GetAll()\r\n{\r\n  using (var context \u003d DataObjectFactory.CreateContext())\r\n  {\r\n    return context.AssetEntities.Select(x \u003d\u003e AssetMapper.ToBusinessObject(x));\r\n  }\r\n}\r\n\r\n ",
  "answers": [
    {
      "ansID": 1242,
      "ans": "In short, the issue here is the Unleashed code is relying on LINQ to SQL. When you mix in the D O Factory repository, you end up without a context that survives each hit.\r\nOne option I can think of is to add the idea of a disconnected context to your data access code, but this means divorcing the Unleashed code from the data completely. I have blogged about disconnected LINQ, but you can also find numerous Google hits on the subject.\r\nAnother option is to use LINQ, but not LINQ to SQL. This means pulling the entire object graph from the data store and then filtering. This can be expensive if you are paging through thousands of records, however, so be sensible. It can still be an option in a scalable system, but you will likely have to introduce a caching pattern so you are not hammering the data store with every page hit.\r\nUltimately, you end up with two patterns with paging (with some variations in between):\r\n\r\n\r\nGet all records and then filter (caching can work here to get some scalability)\r\n\r\nGet a full count and then only retrieve records for the page\r\n\r\n\r\nThere are options in between, but you either pull for a particular page or you pull everything and then filter for a page. There are some more complex patterns, as well, but I would try one of the above before heading into linked lists, etc.\r\nHope this helps.\r\nPeace and Grace,\r\nGreg\r\nTwitter: @gbworld\r\nBlog: http://gregorybeamer.spaces.live.com\r\n"
    },
    {
      "ansID": 1263,
      "ans": "Mario,\r\n\r\nThere are a number of solutions for this.  Mario is correct regarding the fact that you need to disconnect from the data context in order to make this work if you\u0027re not referencing your data context in your controller (which in my opinion you should never do).\r\n\r\nA couple options would be:\r\n\r\nMvcContrib - this is a free framework that contains a Paging component.  You can find it at http://www.codeplex.com/mvccontrib/.\r\nTelerik ASP.NET MVC framework - this is a free (somewhat) framework that I\u0027ve used that makes creating grids and handling paging easy.You should take a look at a 13-episode video and article series where I build and MVC application from the ground up.\r\n\r\nFirst Article in the series - http://www.mvccentral.net/Article/Details/3/Golf_Tracker_-_Pt_1_-_Overview\r\nFirst Video in the series - http://www.mvccentral.net/Video/Details/2/Golf_Tracker_-_Pt_1_-_Overview\r\n\r\nI hope they help.\r\n\r\nKing Wilder"
    },
    {
      "ansID": 1268,
      "ans": "Hey King, I have looked at your tutorials earlier this year which is how I found out about dofactory.com.  I have also looked at the Telerik and MvcContrib libraries.  I was just trying to see how to add the paging support using the PagedList library."
    }
  ]
}