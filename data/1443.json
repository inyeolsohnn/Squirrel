{
  "id": 1443,
  "url": "www.dofactory.com/topic/1443/what-design-pattern-s-to-use-to-build-a-extractor-for-a-flat-file-based-on-a.aspx",
  "title": "What design pattern(s) to use to build a extractor for a flat file based on a specification?",
  "ques": "I have a flat file where each row has a specification.  Say the first row specification level 100 a header row and all 200s are data rows and level 199 is a file summary.\r\nI have created a data table that contains the specifications, and I am able to get the specifications into an object List\u003cRowSpecs\u003e no problem. \r\n\r\nI open the file and I read each row and based on the first three characters I pull the specifications for that row.  I iterate through the specific specs for that row and assign the data to that field in the appropriate element.  Some times there is some conversion of the data, or a lookup that needs to occur on a piece of data, and sometimes there are some special rules like formatting etc.  \r\n\r\nI have coded it to make it work, but it seems very clunky and riddled with possible errors.  Does anyone have a good suggestion for how to apply a design pattern for this type of situation?  Multiple patterns?\r\n\r\nThe other trick is that I use the field name to match the object field name to reflect back and set the field formatting and the field data, so I have to make sure those items match or decorate them somehow or build a mapping of some sort.  \r\n\r\nAnyway, any ideas would be appreciated!  Also, I need to go both ways, in other words, I need to use the rowspecs to build a file or to parse the file.\r\n\r\nthanks!",
  "answers": [
    {
      "ansID": 1628,
      "ans": "Tony, could you please post your code for reference.."
    },
    {
      "ansID": 1629,
      "ans": "I am no expert, but I faced somewhat similar issue when working with excel file.\r\n\r\nI used Strategy pattern for extracting information from files.\r\nSecondly, I used Flyweight pattern for capturing data before writing or processing. \r\n\r\nI used Collection Objects to capture data (List and Dictionary)\r\n\r\nList\u003cobject\u003e -\u003e this can be another dictionary for quick access (if required) Dictionary\u003cId, Object\u003e\r\n\r\nObject\r\n{\r\n Dictionary\u003cProperty, Value\u003e\r\n}\r\n\r\nStrategy Pattern -\u003e follows principle of Encaplusation - Seperate what changes\r\n\r\nHope this will be helpful.\r\n\r\nI appologise for poor english.\r\n"
    },
    {
      "ansID": 1673,
      "ans": "Hi for your scenario , I could think of Factory pattern .\r\nFile formats could normally vary like Delimited and Fixed Width .\r\n\r\nProcessing a Delimited File is fairly straight forward and processing Fixed Width needs extra effort.\r\n\r\nFor Fixed Width I would recommend to have a xml based File Schema, which could be loaded and parsed against the data file.\r\n\r\nIn case if the File format changes for Field Names, length, lookup formatting etc., all that you need to do is to change the XML and not the code.\r\n\r\nThis way your app becomes more resilient to change requirements and will add extensibility as well.\r\n\r\nPlease refer to the code snippet I have put in for your reference.\r\n\r\nIn Short \r\n1) MyFile is the File object (product) being handled.\r\n2) MyFileProcessor will return the FileProcessor to IFileProcessor (Delimeted or a FixedWidth) based on the File Format you choose (on the UI?)\r\n3) IFileProcessor.ProcessFile() will process and return the data (as a DataTable - assumed for simplicity).\r\n\r\nThis way you may choose to have the code within the console application to stay on your app side code (ASP.NET or Windows forms etc.,)\r\nAll the other stuff could be placed on a service , which has public method (of course you got to add Webmethod attribs) to be triggered by the clients.\r\n\r\nPlease Note: \r\nThe same factory pattern could be extended to provide different file schemas , based on some logic (filename?) in case if you wish to have different set of file formats for different set of files.\r\nAlso, you may also have a separate schema for delimited files and refer them too for Header/Trailer.\r\nYou may add that to this code as you would prefer.\r\n\r\nPlease share your thoughts , if this suggestion is ok.\r\nThanks,\r\nTarriq Ferrose Khan\r\n\r\n\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Text;\r\nusing System.Data;\r\n\r\n\r\nnamespace ConsoleApplication1\r\n {\r\n     public enum CustomFileType {FixedWidth,Delimited}\r\n\r\n     class Program\r\n     {\r\n         static void Main(string[] args)\r\n         {\r\n             //File object being handled\r\n             MyFile myFile \u003d new MyFile( \u0027Test.txt \u0027,CustomFileType.FixedWidth);\r\n             \r\n             //File Factory returning the exact File processor based on File Type \r\n             MyFileProcessorFactory processorFactory \u003d new MyFileProcessorFactory(myFile);\r\n             IFileProcessor iFileProcessor \u003d processorFactory.GetFileProcessor();\r\n\r\n             //Process File will call the ProcessFile method of the FileProcessor Product being returned by factory\r\n             \r\n             iFileProcessor.ProcessFile(myFile);\r\n                 //myFile.ProcessedFileData will need to have the processed collection.\r\n             Console.ReadLine();\r\n         }\r\n     }\r\n\r\n     public interface IFileProcessor\r\n     {\r\n         MyFile ProcessFile(MyFile myFile);\r\n     }\r\n\r\n     public class MyFile\r\n     {\r\n         string _FileName \u003d string.Empty;\r\n         CustomFileType _FileType;\r\n         DataTable _FileData \u003d new DataTable();\r\n\r\n         public string FileName\r\n         {\r\n             get {return _FileName; }            \r\n         }\r\n         public CustomFileType FileType\r\n         {\r\n             get { return _FileType; }\r\n         }\r\n\r\n         public DataTable ProcessedFileData\r\n         {\r\n             get { return _FileData; }\r\n             set {_FileData\u003dvalue; }\r\n         }\r\n\r\n         public MyFile(string FileName, CustomFileType fileType)\r\n         {\r\n             _FileName \u003d FileName;\r\n             _FileType \u003d fileType;\r\n         }\r\n     }\r\n\r\n     public class MyFileProcessorFactory\r\n     {\r\n         public IFileProcessor processor;\r\n         public MyFile myFile;\r\n\r\n         public MyFileProcessorFactory(MyFile _myfile)\r\n         {\r\n             myFile \u003d _myfile;\r\n         }\r\n\r\n         public IFileProcessor GetFileProcessor()\r\n         {\r\n\r\n             switch (myFile.FileType)\r\n             {\r\n                 case CustomFileType.Delimited:\r\n                     processor\u003d new MyDelimitedFileProcessor();\r\n                     break;\r\n                 case CustomFileType.FixedWidth:\r\n                     processor\u003d new MyFixedWidthFileProcessor();\r\n                     break;\r\n             }\r\n             return processor;\r\n         }\r\n     }\r\n\r\n     public class MyFixedWidthFileProcessor : IFileProcessor\r\n     {\r\n\r\n         public MyFile ProcessFile(MyFile myfile)\r\n         {\r\n             \r\n             if (LoadSchema())\r\n             {\r\n                 if (CheckFileIntegrity())\r\n                 {\r\n                     myfile.ProcessedFileData \u003d CreateDataTable();\r\n                 }\r\n             }\r\n             Console.WriteLine( \u0027Fixed \u0027);\r\n             return myfile;\r\n         }\r\n         private bool LoadSchema()\r\n         { \r\n             //Load the XML Schema.\r\n             //if not loaded properly returns false.\r\n             //else\r\n             return true;\r\n         }\r\n\r\n         private bool CheckFileIntegrity()\r\n         {\r\n             //Check if the Header and Trailer format on the data file matches with the defined schema.\r\n             //Checks if the actual number of rows on the file matches with Header /trailer count\r\n             //returns false if any of the above it false\r\n             //else\r\n             return true;\r\n         }\r\n\r\n         private DataTable CreateDataTable()\r\n         {\r\n             //this will parse through the file against the loaded schema and return a Data Table\r\n             return new DataTable();\r\n         }\r\n     }\r\n\r\n     public class MyDelimitedFileProcessor : IFileProcessor\r\n     {\r\n         string StandardDelimiter \u003d  \u0027| \u0027;\r\n         //You may declare this as a property to have other delimiters - passed in from UI.\r\n         public MyFile ProcessFile(MyFile myfile)\r\n         {\r\n             Console.WriteLine( \u0027Delimited \u0027);\r\n             return myfile;\r\n         }\r\n         private DataTable CreateDataTable()\r\n         {\r\n             //this will parse through the file for the delimiter and return DataTable\r\n             return new DataTable();\r\n         }\r\n\r\n\r\n     }\r\n\r\n\r\n\r\n         \r\n     \r\n }\r\n\r\n \r\n\r\nSample XML Schema - to be validated?\r\n\r\n\u003c?xml version\u003d \u00271.0 \u0027 encoding\u003d \u0027utf-8 \u0027 ?\u003e\r\n\u003cCustomFileSchema\u003e\r\n\u003cHeaderSchema value\u003d \u0027100;#########;mm/dd/yyyy \u0027/\u003e\r\n\u003cTrailerSchema value\u003d \u0027199;#########;mm/dd/yyyy \u0027/\u003e\r\n\u003cDataSchema Tag\u003d \u0027200 \u0027\u003e\r\n\u003cField Name\u003d \u0027Test1 \u0027 Order\u003d \u00271 \u0027 length\u003d \u002710 \u0027 NeedsLookup\u003d \u0027False \u0027 FieldFormatting\u003d \u0027dd/mm/yyyy \u0027\u003e\u003c/Field\u003e\r\n\u003cField Name\u003d \u0027Test2 \u0027 Order\u003d \u00272 \u0027 length\u003d \u00278 \u0027 NeedsLookup\u003d \u0027true \u0027 \u003e\u003c/Field\u003e\r\n\u003cField Name\u003d \u0027Test3 \u0027 Order\u003d \u00273 \u0027 length\u003d \u002710 \u0027 NeedsLookup\u003d \u0027False \u0027  FieldFormatting\u003d \u0027$##,###,###.00 \u0027\u003e\u003c/Field\u003e\r\n\u003c/DataSchema\u003e\r\n\u003c/CustomFileSchema\u003e\r\n\r\n "
    },
    {
      "ansID": 1773,
      "ans": "I appreciate the responses.  Its been a while and I developed my own solution.  I created a few tables in a database to store the data for the specifications of the file.  This allows me to define any specification including versions of the specifications.  The detail rows contain the following fields, Id, RecordTypeId, FieldName, StartPosition, FieldLength, Description, IsFieldPadded, PaddingCharacter, FieldFormattingString, PaddingDirection, HasConstantValue, ConstantValue, DataTypeId.\r\n\r\nUsing this data I can create a collection of detail specifications that defines a row, and either parse it or build it against that specification.\r\n\r\nIt gets trickier when you have to know what the previous line was in order to apply the correct specification to the current line.\r\n\r\nBut in psuedo code her is a basic idea:\r\n\r\nRead file into List\u003cstring\u003e\r\n-- determine the specifications required to decompose this file\r\nGet Specifications for file\r\nfor each string in List\r\n        get the specifications for this row -- in my case the first 3 characters of each row are the row type identifier\r\n        create Collection to store decomposed objects  (ie whatever each row holds the data for)\r\n        for each specification in row specifications\r\n                create new decomposed object item\r\n                Extract the data for specification\r\n                (here is where I ran into coding trouble -- I had a huge switch based on RecordType and a method to extract the data based on record types.  Very ugly but functional.  I also had to add code in this method to check for field types like Time or Date or both also for handling boolean conversion of data and decimal types)\r\n                Once you have the data for the field then you could easily set the value of the objects field\r\n\r\nIn my case if I could not convert some piece of data I would throw an exception and then I could figure out why and handle that, then just rerun the process.\r\n\r\nIf anyone is interested, feel free to ping me and you can send email to tony at blognstuff dot com\r\n\r\nAlways interested in someone looking at my solution and showing me a better way!\r\n\r\n                \r\n                \r\n"
    }
  ]
}