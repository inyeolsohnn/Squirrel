{
  "id": 1305,
  "url": "www.dofactory.com/topic/1305/which-pattern-to-use-for-one-practical-application.aspx",
  "title": "Which pattern to use for one practical application?",
  "ques": "Hello,\r\n\r\nI don\u0027t have any real-world, practical experiences with using Design Patterns (only theoretical).\r\n\r\nHere is my situation: I have been working on a WinForms application. The items of the menu (and sub-menu items) are different for different user-types. So, different user-types should see different menu items (and different sub-menu items).\r\n\r\nDuring the login process, the user type is determined (i.e. type1, type2, etc).  I\u0027d like to dynamically display menu items (for main menu) and dropdown items (for menu items of main menu). Of course, I could do it by using a switch construct:\r\nswitch (type)\r\n{\r\n     case User.Type_1:\r\n        mainmenu.MenuItems.Add(menuItem1);\r\n     break;\r\n\r\n     case User.Type_2:\r\n       mainmenu.MenuItems.Add(menuItem1);\r\n       mainMenu.MenuItems.Add(menuItem_2);\r\n     break;\r\n\r\n     // etc\r\n}\r\n\r\nHowever, I feel this is a perfect scenario for a Design Pattern. Could someone suggest any suitable Patterns for this task? \r\nI was considering the State pattern, but it this ppropriate for my situation?  Is this scenario good for applying Design Patterns?\r\n\r\nI would be grateful for any response or suggestion...",
  "answers": [
    {
      "ansID": 1435,
      "ans": "I think the Strategy Pattern is better than State Pattern here. \r\nMy question is why do you think you want to preserve State (as in the State pattern)?"
    },
    {
      "ansID": 1439,
      "ans": "Eek! if..then..else spaghetti ahoy!! Imagine you have 100 types of user, and the menu is dependent on the permissions that user has....\r\n\r\nYou have options here. Firstly, you can use a pattern - you can use a different patterns to achieve the same goal (creational patterns are only easier or harder and less flexible) - Have a look at the visitor pattern http://www.dofactory.com/Patterns/PatternVisitor.aspx which is often used in menu type scenarios. But you should look at taking the responsibility for creating the menu away from the  \u0027application \u0027 code \r\n\r\ndelegate the responsibility at runtime via Dependency Injection. This will allow your application to call against an interface rather than a concrete implementation. This class may itself use your pattern of choice. \r\n\r\nThe key thing here Milovan, is context.  \u0027Do I need my MenuCreator class to be flexible enough that I can change how it works without breaking anything else \u0027. There is no right answer, only what is suitable for the context.\r\n\r\nHTH"
    },
    {
      "ansID": 1444,
      "ans": "My humble thoughts..\r\n\r\nWhenever we have a scenario of parsing set of rules and render different group of items (UI components like menus) to UI layer.. Builder Pattern may be the best suite.\r\n\r\n1) On login you you call the Director class which may take UserInfo Object as parameter.\r\n        Menuitems menuItems \u003d Director.BuildMenu(new UserInfo(UserId)); //for simplicity assumed to pass only User Id\r\n2) The Director class here acts like a stub for creating Rule based UI objects, which may stay in the UI layer.\r\n\r\n3) On Receivng the Build Menu request from Windows Form, will choose the respective Builder object , here the Menu Builder\r\n\r\n4) Then passed on the UserInfo obejct to the MenuBuilder \r\n5) Menu Builder which may be in a different layer will need to parse through set of rules , Like verifying the DB table to get access rights for the current user.\r\n5) Build list of Menu Items based on the data retrieved from DB.\r\n6) Because its Winforms application you may wish to have a Command Type Object (as a Member) in each menu item , \r\n    which could be initialized to store the respective action.\r\n7) Return the list to the Director Class and it in turn -returns to the Windows Forms.\r\n\r\nHope this helps.\r\n\r\nTarriq Ferrose Khan."
    },
    {
      "ansID": 1445,
      "ans": "\u003eEek! if..then..else spaghetti ahoy!! Imagine you have 100 types of user, and the menu is dependent on the permissions that user \u003ehas....\r\n\r\n\u003eYou have options here. Firstly, you can use a pattern - you can use a different patterns to achieve the same goal (creational patterns \u003eare only easier or harder and less flexible) - Have a look at the visitor pattern http://www.dofactory.com/Patterns /PatternVisitor.aspx which is often used in menu type scenarios. But you should look at taking the responsibility for creating the menu \u003eaway from the  \u0027application \u0027 code \r\n\r\n\u003edelegate the responsibility at runtime via Dependency Injection. This will allow your application to call against an interface rather than a \u003econcrete implementation. This class may itself use your pattern of choice. \r\n\r\n\u003eThe key thing here Milovan, is context.  \u0027Do I need my MenuCreator class to be flexible enough that I can change how it works without \u003ebreaking anything else \u0027. There is no right answer, only what is suitable for the context.\r\n\r\nThank you very much for your reply ... Your answer has been very helpful ...\r\n\r\nAfter a Google search and readings GoF book (and a few other books), I have made one solution based on Factory pattern.\r\n\r\nHere is a short description:\r\n\r\ninterface IBaseMenu; // has a method: MenuStrip CustomMenu();\r\n\r\nClasses, which implements interface IBaseMenu:\r\n\r\nclass Menu_UserType_1 : IBaseMenu\r\nclass Menu_UserType_2 : IBaseMenu, etc. \r\nThese classes implements method: CustomMenu():\r\n- creates objects of type: MenuStrip, MenuStripItems, ..., and returns created MenuStrip (according to the type of logged user),\r\n\r\nClass: MenuStripFactory // this class create objects of type IBaseMenu, on the base of logged user\r\n{\r\npublic IBaseMenu getMenu(int userType)\r\n        {\r\n            IBaseMenu menuBase \u003d null;\r\n            switch (userType)\r\n            {\r\n                case 1:\r\n                    menuBase \u003d new Menu_UserType_1(); \r\n                    break;\r\n                case 2:\r\n                    menuBase \u003d new Menu_UserType_2(); \r\n                    break;\r\n                default:\r\n                    throw new Exception( \u0027Unknown Object \u0027);\r\n            }\r\n            return menuBase;\r\n        }\r\n}\r\n\r\nFinally, in MainForm, the code is:\r\n                MenuStripFactory menuFactory \u003d new MenuStripFactory();\r\n                IBaseMenu menuBase \u003d menuFactory.getMenu(UserType_XY); \r\n                this.MainMenuStrip \u003d (MenuStrip)menuBase.CustomMenu();\r\n                this.Controls.Add(this.MainMenuStrip);\r\n\r\nIt works fine. \r\nNow, I\u0027d like to add MenuItemsClick handlers - could I continue with Factory pattern or try to do it with some new pattern?\r\n\r\nThanks again for your reply ...\r\n\r\n"
    }
  ]
}