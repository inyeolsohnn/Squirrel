{
  "id": 1503,
  "url": "www.dofactory.com/topic/1503/strategy-again-this-time-manipulating-a-view-that-has-different-modes.aspx",
  "title": "Strategy again. This time: Manipulating a View (that has different Modes)",
  "ques": "Hi there again,\r\n\r\nIt\u0027s been some time and my last question was aimed at the strategy pattern. I wanted to know how I can make use of this pattern to replace a switch/case with something more SOLID. :)\r\n\r\nThis time, I would like to know about possible best practices in regards to working with an MVP design.\r\n\r\nAssume that you have a WinForms project that contains some views that implement interfaces and presenters that connect them to business objects (models) using databinding. \r\n\r\nAssume further that you have a view that is able to be presented in different modes. Depending on the mode selected, specific controls in the view are [dis|en]abled, (in)visible, etc...\r\n\r\nUsually you\u0027d see something like this:\r\n\r\nPresenter:\r\nSwitch Mode\r\n    Case ModeEnum.Mode1\r\n        View.TextBox.Visible \u003d True\r\n        View.Label.Visible \u003d True\r\n\r\n    Case ModeEnum.Mode2\r\n        View.TextBox.Visible \u003d False\r\n        View.Label.Visible \u003d False\r\n\r\nEnd Switch\r\n\r\nI\r\nHowever... in my case the base code is even more complicated. The answer to the question of what to do with the controls is based on more than one enum, but also some old fashioned strings that contain further selection criterias.\r\n\r\nFor example:\r\n\r\nSwitch Mode\r\n    Case ModeEnum.Mode1\r\n        If Criteria \u003d \u0027Criteria1\u0027 Then\r\n            View.TextBox.Visible \u003d True\r\n            View.Label.Visible \u003d True\r\n        Else If Criteria \u003d \u0027Critera2\u0027 Then\r\n            View.TextBox.Visible \u003d True\r\n            View.Label.Visible \u003d False\r\n        End If\r\n.\r\n.\r\n.\r\n\r\nWhat I would like to achieve now is implementing a strategy pattern that allows the presenter to call into a context class with the Mode and the Criteria so that the context class can execute a method that manipulates the view accordingly.\r\n\r\nAre there any best practices in regards to SOLID?\r\n\r\nOther people in my team did something similar. However, they implemented methods within the views that were responsible for manipulating the views\u0027 controls and called them from the context class. This however is not OCP. Each time a new mode is added, not only a new strategy needs to be implemented but also a method within the view (you get the point).\r\n\r\nSo: How do you solve this?\r\n\r\nRegards,\r\nChristian.",
  "answers": [
    {
      "ansID": 1706,
      "ans": "Hi Interesting question,  \r\n\r\nWill work more on this question and get back but meanwhile..would like to know whats your focus here:\r\n\r\n 1) to minimize coding/impact to your solution? \r\n 2) or if it is to have a dynamic solution that could automatically generate Views based on Mode/Criteria? \r\n\r\nif yes (for 2 qn then) if there is a new Mode and/or Criteria to be introduced to your app, yes we will have to add the Mode and a relevant method to the class that generates the View.\r\n\r\nMay be we can think of de-coupling the UI from the class which generates the View various other patterns.\r\n\r\nIf you already have solution by now, please share.\r\n\r\n--Due to space limiation was not able to put in comments field--\r\n\r\nThanks and Regards\r\nTarriq"
    }
  ]
}