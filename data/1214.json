{
  "id": 1214,
  "url": "www.dofactory.com/topic/1214/prototype.aspx",
  "title": "Prototype Pattern to copy/clone objects",
  "ques": "I would like to know why following the DOF Prototype pattern is better suited than creating a simple and plain way of copying/cloning an object.\r\nGiven the following base class and creational factory method class PersonBirthFactory:\r\n\r\n\r\npublic class Person\r\n{\r\n  public Object Firstname{ get; set; }\r\n  public Object Lastname{ get; set; }\r\n}\r\n\r\n\r\npublic class PersonBirthFactory\r\n  {\r\n    public static CreatePerson()\r\n    {\r\n       Person p \u003d new Person();\r\n       p.FirstName \u003d firstName;\r\n       p.LastName \u003d firstName;\r\n       return p;\r\n    }\r\n}\r\nThe .NETOptimized version of the Prototype uses the following code to perform a deep copy: \r\n\r\n\r\npublic object DeepCopy()\r\n{\r\n   MemoryStream stream \u003d new MemoryStream();\r\n   BinaryFormatter formatter \u003d new BinaryFormatter();\r\n   formatter.Serialize(stream, this);\r\n   stream.Seek(0, SeekOrigin.Begin);\r\n   object copy \u003d formatter.Deserialize(stream);\r\n   stream.Close();\r\n   return copy;\r\n}\r\n\r\n\r\nA couple questions as to why I cannot use the following as opposed to the example above:\r\n\r\n\r\npublic object DeepCopy()\r\n{\r\n  Person p \u003d new Person();\r\n  p.FirstName \u003d this.FirstName;\r\n  p.LastName \u003d this.FirstName;\r\n  return p;\r\n\r\n}\r\nWhy not use the following logic or something more simple than messing w/ MemoryStream, Serialization, Etc? \r\nI can implement this pattern w/o doing research and wondering the benefits here, is it just a performance increase for using this? \r\nIn my current scenario the copy might happen at most 4 times in an hour, but when it happens they happen in quick sucession. I am mainly doing this to remove the logic  when creating a collection and need to fill in the missing items(cloned from other items) from the factory. The offending code is complex if/then/else/loops/etc... Best suited outside the factory in another object where I may need to use in other parts of the application down the road.\r\nLooking for alternatives and would like to open a discussion on the best alternative.\r\nTIA,\r\n\r\nS",
  "answers": [
    {
      "ansID": 1317,
      "ans": "Hi,\r\n\r\n    I can think of two issues with your approach of copying the object.\r\n\r\n    1. You will need to modify your copy method each time a property changes in the Person class.\r\n    2. You copy the reference, not the object. This means that when the primary object has a member\r\n       of a reference type and it changes, your copy will change too. (will provide example shortly).\r\n\r\n   Hope that helps.\r\n\r\n   UPDATE: Added Code example\r\n\r\n  First, the Person class:\r\n\r\n[Serializable] \r\n      public class Person \r\n      { \r\n          public Object FirstName { get; set; } \r\n          public Object LastName { get; set; } \r\n          public Person Mother { get; set; } \r\n\r\n          public static Person CreatePerson(string firstName, string lastName) \r\n          { \r\n              var p \u003d new Person { FirstName \u003d firstName, LastName \u003d lastName }; \r\n              return p; \r\n          } \r\n\r\n          public override string ToString() \r\n          { \r\n              if( Mother !\u003d null) \r\n              { \r\n                  return string.Format( \u0027{0}, {1} (Mother: {2}) \u0027, LastName, FirstName, Mother); \r\n              } \r\n              else\r\n              { \r\n                  return string.Format( \u0027{0}, {1}) \u0027, LastName, FirstName); \r\n              } \r\n          } \r\n      } \r\n\r\n  \r\n Helper methods for copying:\r\n\r\npublic static class PersonBirthFactory \r\n     { \r\n         public static Person DeepCopy(this Person person) \r\n         { \r\n             var stream \u003d new MemoryStream(); \r\n             var formatter \u003d new BinaryFormatter(); \r\n\r\n             formatter.Serialize(stream, person); \r\n             stream.Seek(0, SeekOrigin.Begin); \r\n\r\n             object copy \u003d formatter.Deserialize(stream); \r\n             stream.Close(); \r\n\r\n             return copy as Person; \r\n         } \r\n\r\n         public static Person SimpleCopy(this Person person) \r\n         { \r\n             var p \u003d new Person {FirstName \u003d person.FirstName, LastName \u003d person.LastName, Mother \u003d  person.Mother}; \r\n             return p; \r\n         } \r\n     } \r\nSample Console Application:\r\n\r\n  \r\n\r\ninternal class Program \r\n    { \r\n        private static void Main(string[] args) \r\n        { \r\n            var john \u003d Person.CreatePerson( \u0027John \u0027,  \u0027Doe \u0027); \r\n            john.Mother \u003d Person.CreatePerson( \u0027Jane \u0027,  \u0027Doe \u0027); \r\n            //var jane \u003d Person.CreatePerson( \u0027Jane \u0027,  \u0027Doe \u0027);\r\n\r\n            var johnSimpleCopy \u003d john.SimpleCopy(); \r\n            var johnDeepCopy \u003d john.DeepCopy(); \r\n\r\n\r\n            System.Console.WriteLine( \u0027\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d{STEP 1}\u003d\u003d \u0027); \r\n            System.Console.WriteLine(john); \r\n            System.Console.WriteLine(johnSimpleCopy); \r\n            System.Console.WriteLine(johnDeepCopy); \r\n\r\n            john.Mother.FirstName \u003d  \u0027Jen \u0027; \r\n          \r\n            System.Console.WriteLine( \u0027\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d{STEP 2}\u003d\u003d \u0027); \r\n            System.Console.WriteLine(john); \r\n            System.Console.WriteLine(johnSimpleCopy); \r\n            System.Console.WriteLine(johnDeepCopy); \r\n        } \r\n    } \r\n\r\n The output:\r\n\r\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d{STEP 1}\u003d\u003d\r\nDoe, John (Mother: Doe, Jane))\r\nDoe, John (Mother: Doe, Jane))\r\nDoe, John (Mother: Doe, Jane))\r\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d{STEP 2}\u003d\u003d\r\nDoe, John (Mother: Doe, Jen))\r\nDoe, John (Mother: Doe, Jen))\r\nDoe, John (Mother: Doe, Jane))\r\n\r\n\r\nAs you can see from above, when chaning the Mother in\r\nobject  \u0027john \u0027  \u0027johnsimplecopy \u0027 is also changed. This means\r\nthat your version of the copying only copies the reference\r\nnot the object itself.\r\n\r\n"
    }
  ]
}