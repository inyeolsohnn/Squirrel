{
  "id": 1338,
  "url": "www.dofactory.com/topic/1338/what-is-the-difference-between-factory-pattern-and-di.aspx",
  "title": "Difference between Factory Pattern and Dependency Injection",
  "ques": "What is the difference between Factory Pattern and Dependency Injection?  And when does one use the Factory Pattern over Dependency Injection?\r\n\r\nIf I write custom xml in my config file and then in my custom factory.cs file I create an interface object with reflection or getsection() from xml. Next, I return an interface to the client like Service Locator Pattern does this then become the Dependency Injection? \r\n\r\nI am very confused and need some examples and/or a roadmap.\r\n\r\nThanks. \r\n",
  "answers": [
    {
      "ansID": 1471,
      "ans": "Factory and DI are different and may be complimentary.  Factory is used to create objects and DI is used to move the responsibility of creating an object outside the main code.\r\n\r\n This may seem confusing.  Here\u0027s an example.\r\n\r\n\r\n Say you have a  \u0027Home \u0027 Controller with an action named  \u0027Index \u0027.\r\n\r\n public class HomeController : Controller \r\n {\r\n       public ActionResult Index()\r\n       {\r\n               IDashBoardService service \u003d MyFactory.GetDashBoardService\u003cIDashBoardService\u003e();\r\n               var widgets \u003d service.GetAll();      \r\n       } \r\n }\r\n\r\n The above  \u0027Index \u0027 method creates an instance of IDashBoardService using the MyFactory.  It\u0027s kind of generic implementation for representation.\r\n\r\n Now, if you observe the  \u0027Index \u0027 method is responsible for creating an instance of  \u0027IDashBoardService \u0027.  As application grew in size there may be more services added and the creation of these services will be mixed with the core code.\r\n\r\n DI provides a way to abstract away this creation.  There are many ways to do this, the primary being injecting dependencies via constructor or via property.  Shown below is the same above example by using DI (constructor injection).\r\n\r\n public class HomeController : Controller \r\n {\r\n       public ActionResult Index(IDashBoardService service)\r\n       {\r\n               var widgets \u003d service.GetAll();      \r\n       } \r\n }\r\n\r\n In the above code the instance of  \u0027IDashBoardService \u0027 is being passed by some DI containers while creating the  \u0027HomeController \u0027.  This can be done by subclassing the DefaultController factory and injecting the required dependencies as required.  In this case the code is pretty clean and only deals with the core logic rather than supporting activities like creating instances and all...\r\n\r\n Some of the well known framework available for DI are\r\n\r\n 1.  Unity Application Block (Microsoft)\r\n 2.  Ninject\r\n 3.  StructureMap\r\n 4.  Castle Windsor\r\n 5.  Munq/Funq\r\n 6.  Autofac\r\n\r\n Do google for more information about these frameworks.... They are pretty useful in many scenarios....\r\n\r\nHere\u0027s is a set of videos which shows how to develop a DI container using TDD approach...\r\n\r\nhttp://weblogs.asp.net/cazzu/archive/2009/02/02/funq.aspx\r\n\r\nIt\u0027s worth a watch.\r\n\r\n Hope this helps..."
    }
  ]
}