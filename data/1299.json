{
  "id": 1299,
  "url": "www.dofactory.com/topic/1299/how-to-prevent-duplicate-code-in-different-for-loops.aspx",
  "title": "How to prevent duplicate code in different for loops?",
  "ques": "I\u0027ve got a class, let\u0027s say a \u0027mutual fund portfolio\u0027. It\u0027s got 3 methods that calculate 3 different numbers each using a for-loop. Most of the steps in the 3 different methods are exactly the same, except for 1 or 2 steps. \r\nIs there a smarter way to prevent duplicate code than just writing 1 base method and using a case statement for the 3 different numbers to be calculated? I looked at the \u0027Template Method Design Pattern\u0027 but that doesn\u0027t seem to be applicable.\r\n\r\nYou can find some simplified code underneath. The difference is in the \u0027DoCalculationsWithMemberVariables_Step3\u0027 step of the \u0027Test_MeasureX_Historically\u0027 methods. Those differ.\r\n\r\nPublic Class MutualFundsPortfolio\r\n\r\n\r\n     Public Sub Test_Measure1_Historically()\r\n       Dim j As Integer\r\n       Dim lNrOfPeriods As Integer\r\n       lNrOfPeriods \u003d 20 \r\n       For j \u003d 1 To lNrOfPeriods \r\n         DoCalculationsWithMemberVariables_Step1\r\n         DoCalculationsWithMemberVariables_Step2\r\n         DoCalculationsWithMemberVariables_Step3a\r\n         DoCalculationsWithMemberVariables_Step4 \r\n       Next j\r\n     End Sub \r\n   \r\n     Public Sub Test_Measure2_Historically()\r\n       Dim j As Integer\r\n       Dim lNrOfPeriods As Integer\r\n       lNrOfPeriods \u003d 20 \r\n       For j \u003d 1 To lNrOfPeriods \r\n         DoCalculationsWithMemberVariables_Step1\r\n         DoCalculationsWithMemberVariables_Step2\r\n         DoCalculationsWithMemberVariables_Step3b\r\n         DoCalculationsWithMemberVariables_Step4 \r\n       Next j\r\n     End Sub \r\n   \r\n\r\n     Public Sub Test_Measure3_Historically()\r\n       Dim j As Integer\r\n       Dim lNrOfPeriods As Integer\r\n       lNrOfPeriods \u003d 20 \r\n       For j \u003d 1 To lNrOfPeriods \r\n         DoCalculationsWithMemberVariables_Step1\r\n         DoCalculationsWithMemberVariables_Step2\r\n         DoCalculationsWithMemberVariables_Step3c\r\n         DoCalculationsWithMemberVariables_Step4 \r\n       Next j\r\n     End Sub \r\n   End Class\r\n\r\n ",
  "answers": [
    {
      "ansID": 1408,
      "ans": "Hi, I thought I\u0027d take a crack at this.  I\u0027m still learning like you, and this is what I came up with.  It\u0027s a small VS 2008 Console project that uses the Strategy Pattern and other cool stuff.  It\u0027s probably not exactly what you need but it does what you need without duplicating code.\r\n\r\nThis was kind of fun.  Three years ago I could never do this.\r\n\r\nHere\u0027s some code from the attached file example.\r\n\r\n\r\n\r\nclass Program\r\n     {\r\n         static void Main(string[] args)\r\n         {\r\n\r\n             Console.WriteLine( \u0027Enter one of the following values: \u0027);\r\n             Console.WriteLine( \u0027   Test1, Test2, or Test3 \u0027);\r\n\r\n             // Read the input value\r\n             // Valid values are: Test1, Test2, Test3\r\n             string testType \u003d Console.ReadLine();\r\n\r\n             // Convert the string type to the Enum type.\r\n             HistoricalItems key \u003d (HistoricalItems)Enum.Parse(typeof(HistoricalItems), testType.ToLower());\r\n\r\n             // Instantiate a new Portfolio context.\r\n             MutualFundsPorfolio portfolio \u003d new MutualFundsPorfolio();\r\n\r\n             // Process the selected item type.\r\n             portfolio.Process(key);\r\n\r\n             Console.ReadLine();\r\n         }\r\n     }\r\n\r\nYou can download the file here: http://www.kingwilder.com/downloads/strategyexample.zip - 51KB - VS 2008 project\r\nThis zip file contains both VB.Net and C# examples.\r\n\r\nI hope it helps.\r\n\r\nKing Wilder"
    }
  ]
}