{
  "id": 1472,
  "url": "www.dofactory.com/topic/1472/interpertion-setup-consultation-c.aspx",
  "title": "Interpretation Setup Consultation (C#)",
  "ques": "Hello. This is my first question ever. Party right here. Now, onto the question!\r\n\r\nBackground information:\r\nI am creating a framework for a game. It is a M(ulti) U(ser) D(ungeon) or a text based imagination driven interactive book or at least that\u0027s how I see it. I\u0027m taking an approach to it that is hopefully rather fresh. I have not really looked into all the different ones already in existence because I do not want the vision I have to be tainted (you will not change my mind on this). Enough about that though. Right now I am working on the command text interpretation system.\r\n\r\nI view all input from the user to fall into the following 6 categories:\r\n\r\nActions - grab/touch/look/feel\r\nAction Arguments - the action \u0027stand\u0027 takes an argument \u0027up\u0027 (things that indicate how-to do an action)\r\nQuantity Indicators - some/three/dozen/all\r\nIdentity References - my/he/it/Bob/them\r\nIdentity Descriptors - dark/blue/tall/ignorant\r\nOrder of Execution - before/after/next/previous/then/and\r\n\r\nThe idea is that Actions know what they need to look for. The action \u0027grab\u0027 knows how to check for a who or a what and possibly a quantity in the command text. If multiple actions are present they execute in the order they are found unless Order of Execution modifies are present. Now this is all swell and dandy but what exactly is my question?\r\n\r\nThe question:\r\nI am all about coding simplicity. Easy to understand readable flexible code design as I am sure most of the people on this site are. I picture there being three steps to interpenetration:\r\n\r\n\r\nFilter the command text of ignorable words (like \u0027the\u0027) and excess garbage\r\nRe-order, if necessary, based on any Order of Execution modifiers\r\nExecute the Actions.I do not plan on doing all the development of the interpretation library so I want people to simply have to create the actions, quantity indicators, or order of execution words. Is there a pattern(s) or a way I could set things up to achieve this? I may not need a pattern to do what I want to do but I do want to consult with those more wise to evaluate what I may be missing. I am thinking about using a \u0027as long as there is another action\u0027 Chain of Responsibility setup with the actions using the Command pattern. Maybe, simply using the Command pattern and executing based on a possibly reordered List\u003cIActionWords\u003e calling \u0027Execute(Context, CommandText)\u0027 would work. I\u0027m not sure what I want yet.\r\n\r\nAll of this is design work. A string of text comes in and I am deciding how I want to handle it from there. Please feel free to suggest anything as I have nothing more than \u0027string comes in now what?\u0027.\r\n\r\nThanks in advance! I do appreciate the time it takes to wrap you\u0027re head around what I\u0027ve said and also the time it takes to devise and respond to my question. \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
  "answers": [
    {
      "ansID": 1647,
      "ans": "\r\nIf I\u0027m understanding your goal right, you want to create an extensible engine, where other developers are able to add new commands (and, perhaps, new objects that can be maniuplated, etc.). \r\nHere are a bunch of thoughts generated by your question. Some may be way off the mark - in which case please forgive me. Hopefully, however, some will be helpful and will give you new directions of inquiry as you design your system.\r\n1. You can rule out third party parsers\r\nThere are a number of parsers  \u0027out there \u0027 (GOLD comes to mind, but I know there are others).  Since a parser generator expects a fully defined grammar (I think this is true in the general case) none will meet your need since you want to be able to discover new commands at run time - and parser generators need to know the text of keywords are the time the parser is generated.\r\n2. Planning for complexity\r\nYou may need to do a little more thinking about the possible complexity of the game you plan to create, before you can create an engine that meets your need. Here\u0027s a scenario that bears thinging about:\r\nConsider a room with a bird in it; the adventurer has a cage.\r\n \u0027Put bird in cage \u0027 is a viable command.\r\nNow, consider that you\u0027d like to add an aviary to your game - where there are several (maybe hundreds) of birds in the room. An implied  \u0027the \u0027 may not be sufficient - maybe you\u0027ll want the user to be able to say  \u0027put five birds in cage \u0027 or  \u0027fill cage with birds \u0027 (requires bird size and cage volume, or cage bird count capacity, constraints, etc.).\r\nThe above scenario is intended to illustrate that you need to strongly consider whether ignoring words like  \u0027the \u0027 will always work, or will only be acceptable depending on context. This greatly affects your parser.\r\n3. Reordering\r\nThe text-based adventure games I\u0027ve played require a single command on a line. So, (in those games, at least) there is no need to reorder commands, or to queue them, etc.  \r\nPerhaps you plan to implement some temporal constraint on commands - so that commands issued on the same command line have a different relationship with each other than commands issued on distinct command lines do.\r\nEither way, I\u0027d make my engine start by splitting the input on the sequencing keywords; it can then sort the now distinct commands, and submit them one at a time to the true command interpreter - just as if they had been typed one per input line. And, if you have a \u0027commands on the same line are related\u0027 you can pass to the command interpreter a token of some kind (a line number, perhaps) that indicates their relationship.\r\nThe bottom line is that I see the reordering action as a step prior to true command interpretation, making the latter simpler.\r\n4. Command interpretation\r\n   This, of course, is the hard part, and I suspect that you have some more thinking to do before you\u0027re ready to implement your engine. (Look at your Identity References examples: \u0027my\u0027 and \u0027Bob\u0027 (or \u0027knife\u0027) are very different parts of speech, so cannot both be identity references ( \u0027my \u0027 doesn\u0027t specify the thing in question, whereas  \u0027Bob \u0027 very concretely specifies a thing).   \u0027my knife \u0027,  \u0027Bob\u0027s knife \u0027 and  \u0027Bob \u0027 are all equivalent parts of speech (things - nouns), with two of those phrases having extra content that selects a specific knife.)\r\n   I recommend that you write a description of the grammar you want to implement and then experiment with dozens of possible commands to see if it works. \r\n   \r\n   Here\u0027s an example (which is probably overcomplex and far from workable, but it hopefully illustrates an approach to designing your interpreter):\r\n   \r\n   \u003ccommand\u003e         :\u003d \u003caction\u003e \u003cobject phrase\u003e [\u003caction modifier phrase\u003e]\r\n   \u003caction\u003e          :\u003d {command name from internal dictionary}\r\n   \u003cobject phrase\u003e   :\u003d [\u003cobject selector\u003e] [\u003cadjective\u003e] \u003cobject\u003e [\u003cpost-selector\u003e]\r\n   \u003cobject\u003e          :\u003d {object name from internal dictionary; singular and plural forms accepted interchangeably}\r\n   \u003cobject selector\u003e :\u003d my | the | \u003cnumber\u003e | \u003cposessive\u003e | his | hers \r\n   \u003cnumber\u003e          :\u003d {digit string} | one | two | some | any | dozen | ...\r\n   \u003cpost-selector\u003e   :\u003d in the corner | behind the door | ...\r\n   \r\n   Where \r\n  [...]    represents an optional clause\r\n  x | y    represents a choice of x or y\r\n  ...    means I couldn\u0027t be bothered to enumerate all the possible choices!\r\n  \r\n Note that the grammar above is almost certainly overkill for a text-based game - and would be fiendish to hand code. So - researching how other text-based games interpret their input might be useful.\r\n \r\n5. Objects and actions\r\n   Before beginning to create an object model for your application, I\u0027d spend some time thinking about how objects and actions are related and, sometimes, constrained. Here are some examples of what I\u0027m thinking:\r\n   \r\n   You can put a bird in a cage. You can probably put stones, a lamp and a water bottle in the cage, too, if you care to.\r\n   \r\n   You can throw a stone. Can you throw a bird? What happens when a stone is thrown (and how far will it travel)? What happens when a bird is thrown (is it alive, asleep, stunned, dead, etc.)?\r\n   \r\n   You can light a lamp, but not a rock. What happens when you try to light the bird? (Grilled chicken?)\r\n6. Incomplete and meaningless commands\r\n   You can \u0027take knife\u0027, but can you \u0027throw axe\u0027? Or must you \u0027throw axe at dwarf\u0027?\r\n   What does it mean if the user types \u0027take axe at dwarf\u0027? Or, \u0027take dwarf\u0027?\r\n   What does your engine do if the user types \u0027take knife\u0027 and there is no knife in the room to take?\r\n   \r\n   You need to think about these questions as you design your model.  \r\n   \r\n7. Design Patterns\r\n None of the above even begins to address OO design patterns, but you will need to address the kinds of concern I raise above before you can start designing an object model for your engine.\r\n \r\n Let\u0027s assume that you\u0027ve thought through the above and have some solid conclusions. What are some of the obvious objects in your game?\r\n * TheGame (probably a container for everything else)\r\n * Player(s)\r\n * Objects (rocks, birds, etc.)\r\n * Places \u0026 \u0027connectors\u0027 (doorways, tunnels, transport portals, etc.)\r\n I keep trying to find a way to use the Command Pattern, but it just doesn\u0027t seem to fit: each type of object (and place) likely has different actions that it can, or cannot, perform.  If there are hundreds of objects in your world, and some can be thrown while some can\u0027t, how do you express the throwability of an object, using the Command Pattern?  The point of the command pattern is that each command implements a stragety (Strategy Pattern) that depends on all commandable objects having a common set of properties, - but each command is completely agnostic about the specific type of object being commanded (and objects are command-agnostic, too, so an IsThrowable property is out of the question). \r\n\r\n SO... to have a model where other developers can add new commands you have to have a pre-defined set of modifiable attributes (and context, I suppose: the  \u0027take \u0027 command may move the target object from being contained in the room to being contained in the player\u0027s backpack). So, custom objects can only meaningfully expose the same set of properties (any extra properties will be unrecognized by commands, that only know about a particular interface).\r\n\r\n AH! Lets say your friend Joe wants to implement some specialized objects (magic spells) and specialized commands to work with them. I guess he could create objects that implement the mandatory IGameObject interface, but also implement the IMagicObject interface; his set of commands have access to the IGameObject properties, but can use reflection to discover if the object at hand also implements IMagicObject and, if it does, manipulates the object accordingly. \r\n SO - maybe the command pattern will work for you, after all.\r\n \r\nI\u0027m Done\r\nI know I\u0027ve not directly answered your question, for which I apologise, but I hope that some of what I\u0027ve said makes sense and is useful. It may be that after you\u0027ve thought about the interactions between (the) player(s), places and objects that you want to be able to implement, you\u0027ll discover what design patterns will support you.\r\n   \r\n   \r\n   "
    },
    {
      "ansID": 1649,
      "ans": "Let me start off by thanking you. I was quite suprised to see your reply but even more so when I noticed that you (maybe) created your account to just reply to my question! Sweet ^_^\r\n\r\nI\u0027ll address what you have me in much the same manner it was given.\r\n\r\n1. I wouldn\u0027t use a third party. I\u0027ll take concepts from other things but as for simply using them is not something I plan to do. It creates a dependency in most cases. I want full liberities with the design and implementation of my model/system.\r\n\r\n2. You did lose me a little bit in your bird example but let me try to give me thoughts on it.\r\n\r\n \u0027Put bird in cage \u0027 is definitly viable. Now, I add an aviary to my game where there are hundreds of birds. I\u0027m not sure what you mean by the implied  \u0027the \u0027 but here is how I see things going down.  \u0027Put \u0027 should be intelligent enough to go:\r\n\r\nput\u003e what?\u003e looks at the identity reference  \u0027bird \u0027 \u003e can we find a sole instance of bird? \u003e no \u003e is a quanity given \u003e no \u003e put fails.\r\n\r\nwhat if it was  \u0027put five bird in cage \u0027 though incorrect grammatically someone could try it:\r\n\r\nput\u003e what?\u003e looks at the identity reference  \u0027bird \u0027 \u003e can we find a sole instance of bird? \u003e no \u003e is a quanity given \u003e yes \u003e are there identity descriptors given? \u003e no \u003e take first 5 or less identities (entities/objects) that match  \u0027bird \u0027 and put them into cage (assuming it allows that) up to however many will fit.\r\n\r\nI foresee the actions being rather intellegent about what they do; developing with the needs of my game/framework. I plan to let the objects, cage in this case, handle the addition of birds.\r\n\r\nI really do not forsee  \u0027the \u0027 really being used. It simply states  \u0027an identity reference is coming up \u0027 or more often it connects words for the tongue. I\u0027ve tried to think of cases where it matters but so far I haven\u0027t. I will be consulting a few  \u0027english major \u0027 friends of mine as I progress.\r\n\r\n3. It seems like the purpose of my reordering step is a bit foggy. First, let me say that my game is not going to be like any prior. I am always asking  \u0027What we would be the best version of this idea/feature be? \u0027 then proceeding to *try* and create it. Let\u0027s just say I have a big dream for this game. Anyhoo!\r\n\r\nTake the sentence,  \u0027grab the hat after standing up \u0027, which to me is a worthy command in game. Without reordering it I would  \u0027grab the hat \u0027 then  \u0027stand up \u0027 while the command clearly was intended to be the other way around. I want this type of syntax to be do-able because it allows more natural combo commands. In addition to that eventually the command input will be wired to a voice-to-text system (I think it will be easy to do).\r\n\r\n4. I believe the parts of speech are irrelevant. The reason being I look at them in more simpler terms being the six I mentioned above almost programmatic if you will.\r\n\r\n \u0027My \u0027 says  \u0027The one who gave the command \u0027 so then  \u0027My knife \u0027 says  \u0027The giver of the command\u0027s knife. \u0027\r\n\r\nThe reason for breaking things down differently is to avoid the pitfall of an expected format. Using the examples you gave as reference it seems far more complex than letting the actions define what they do. Take  \u0027statistics \u0027 for example. If that was the entire command it would come back with  \u0027of what? \u0027 because is that not what you thought when you read it? Now,  \u0027statistics for Bob \u0027 it would come back with  \u0027Bob is age 24 currently eating an ice cream cone in his villa in Arizona. \u0027 for example. The word knows what it expects to operate on and how to find it. You could leave out  \u0027for \u0027 and that would be shorthand because it is merely a connector in this case. \r\n\r\nI can see why you might think this  \u0027would be fiendish to hand code \u0027 but it really only becomes that when you try to add a lot to a simple thing. As we (the developers of the framework) have a need for new action or an existing one to do more it can be incorperated then directly into the action.\r\n\r\n5. I love your examples. WE GET CHICKEN! (that might be an easter egg :P)\r\n\r\nYou bring up some good points to consider. When throwing a bird does the bird have a state and how does that affect the action.\r\n\r\nAll I can tell you now is that as I am thinking about the command system I am also modeling out my Obj (objects since C# has it as a keyword) and Entity models. I forsee my model developing as my actions are. In order to  \u0027unlock and open the door \u0027 I first must have a door and the commands unlock and open.\r\n\r\n6. This really made me smile/laugh because of your examples.\r\n\r\n \u0027throw axe \u0027 would expect a direction or a target.\r\n\r\n \u0027take axe at dwarf \u0027 might operate like this: take\u003e what?\u003e found axe\u003e at dwarf are not actions therefore there is nothing to do. \r\n\r\nhowever given  \u0027take axe from dwarf \u0027: take\u003e what? found axe\u003e is there a what or who?\u003e found from\u003e from what/who?\u003e found dwarf\u003e take the axe from the dwarf (which I am guessing would trigger off an event on the dwarf).\r\n\r\n \u0027take dwarf \u0027: take\u003e what?\u003e dwarf found\u003e is dwarf take-able\u003e no\u003e do nothing.\r\n\r\n \u0027take knife \u0027: take\u003e what?\u003e knife word found\u003e can we resolve a knife reference\u003e no\u003e do nothing.\r\n\r\n7. This is where my mind is grid locked at the moment. The reason I brought up the command pattern is that it *could* be called via  \u0027Action.Execute(commandText) \u0027 in which the Action knows how to execute it. The next part I question is from there how do we execute the next command if it exists which is why I brought up the chain of responsibility pattern at least for the idea of  \u0027passing it off to the next \u0027. \r\n\r\nThis is the part I am trying to map out. I\u0027d like to keep it to the  \u0027three steps to interpertation \u0027 I mentioned about. How it actually comes together is really up to the imagination. Maybe the  \u0027thought process \u0027 I use in response 6 will give you more of an idea of what I got/am thinking.\r\n\r\nI\u0027ll keep reviewing what you answered above and see if it sparks any ideas. You have given me a lot of good things to think about as well as a good laugh or two :) I\u0027d love to keep discuss things with you or even work with you. If you\u0027re interested in either then perhaps we could get some email correspondence going. I won\u0027t be offended at all if you are not.\r\n\r\nThank you! Catch you later.\r\n"
    }
  ]
}